/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
//package group3db;


import java.sql.*;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Admin
 */
public class ViewController extends javax.swing.JFrame {
    private static Model model;
    private ArrayList<Employee> employees = new ArrayList<>();
    private ArrayList<Passenger> passengers = new ArrayList<>();
    private ArrayList<Flight> flights = new ArrayList<>();
    private ArrayList<Booking> bookings = new ArrayList<>();
    private ArrayList<FlightOccupancyReport> foReports = new ArrayList<>();
    private final ArrayList<EmployeeStatisticsReport> esReports = new ArrayList<>();
    private final ArrayList<RevenueReport> revReports = new ArrayList<>();
    private final ArrayList<PassengerReport> passReports = new ArrayList<>();
    private final ArrayList<ViewBooking> viewBooking = new ArrayList<>();
    private final ArrayList<ViewFlight> viewFlight = new ArrayList<>();
    private final ArrayList<ViewPassenger> viewPassenger = new ArrayList<>();
    private final Connection con;

    /**
     * Creates new form Main
     */
    public ViewController(Model model, Connection connection) {
        this.con = connection;
        ViewController.model = model;

        this.employees = model.getEmployees();
        this.passengers = model.getPassengers();
        this.flights = model.getFlights();
        this.bookings = model.getBookings();

        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        background = new javax.swing.JPanel();
        harang = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        employeeManager = new javax.swing.JPanel();
        createEmployeeButton = new javax.swing.JButton();
        cJobTitle = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        cEmpLastName = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        cEmpFirstName = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        cHireDate = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        cSalary = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        dEmployeeID = new javax.swing.JTextField();
        deleteEmployeeButton = new javax.swing.JButton();
        cDepartment = new javax.swing.JTextField();
        jLabel28 = new javax.swing.JLabel();
        uJobTitle = new javax.swing.JTextField();
        updateJobTitleButton = new javax.swing.JButton();
        jLabel29 = new javax.swing.JLabel();
        uEmpLastName = new javax.swing.JTextField();
        viewBookings11 = new javax.swing.JButton();
        jLabel30 = new javax.swing.JLabel();
        uEmpFirstName = new javax.swing.JTextField();
        viewBookings12 = new javax.swing.JButton();
        jLabel31 = new javax.swing.JLabel();
        uEmployeeID = new javax.swing.JTextField();
        jLabel32 = new javax.swing.JLabel();
        uHireDate = new javax.swing.JTextField();
        viewBookings13 = new javax.swing.JButton();
        jLabel33 = new javax.swing.JLabel();
        uSalary = new javax.swing.JTextField();
        viewBookings14 = new javax.swing.JButton();
        jLabel34 = new javax.swing.JLabel();
        uDepartment = new javax.swing.JTextField();
        viewBookings15 = new javax.swing.JButton();
        jLabel36 = new javax.swing.JLabel();
        flightManager = new javax.swing.JPanel();
        createPassengerButton2 = new javax.swing.JButton();
        cGateNumber = new javax.swing.JTextField();
        jLabel37 = new javax.swing.JLabel();
        jLabel38 = new javax.swing.JLabel();
        jLabel39 = new javax.swing.JLabel();
        cDestination = new javax.swing.JTextField();
        jLabel40 = new javax.swing.JLabel();
        cOrigin = new javax.swing.JTextField();
        jLabel41 = new javax.swing.JLabel();
        cDeparture = new javax.swing.JTextField();
        jLabel42 = new javax.swing.JLabel();
        cArrival = new javax.swing.JTextField();
        jLabel43 = new javax.swing.JLabel();
        jLabel45 = new javax.swing.JLabel();
        dFlightID = new javax.swing.JTextField();
        deletePassengerButton2 = new javax.swing.JButton();
        cBasePrice = new javax.swing.JTextField();
        jLabel46 = new javax.swing.JLabel();
        uGateNumber = new javax.swing.JTextField();
        viewBookings17 = new javax.swing.JButton();
        jLabel47 = new javax.swing.JLabel();
        uDestination = new javax.swing.JTextField();
        viewBookings18 = new javax.swing.JButton();
        jLabel48 = new javax.swing.JLabel();
        uOrigin = new javax.swing.JTextField();
        viewBookings19 = new javax.swing.JButton();
        jLabel49 = new javax.swing.JLabel();
        uFlightID = new javax.swing.JTextField();
        jLabel50 = new javax.swing.JLabel();
        uDeparture = new javax.swing.JTextField();
        viewBookings20 = new javax.swing.JButton();
        jLabel51 = new javax.swing.JLabel();
        uArrival = new javax.swing.JTextField();
        viewBookings21 = new javax.swing.JButton();
        jLabel52 = new javax.swing.JLabel();
        uFlightAttendantID = new javax.swing.JTextField();
        viewBookings22 = new javax.swing.JButton();
        jLabel53 = new javax.swing.JLabel();
        viewBookings23 = new javax.swing.JButton();
        jLabel54 = new javax.swing.JLabel();
        jLabel73 = new javax.swing.JLabel();
        jLabel74 = new javax.swing.JLabel();
        jLabel75 = new javax.swing.JLabel();
        cPilotID = new javax.swing.JTextField();
        cCopilotID = new javax.swing.JTextField();
        cLeadAttendantID = new javax.swing.JTextField();
        uPilotID = new javax.swing.JTextField();
        jLabel76 = new javax.swing.JLabel();
        uCopilotID = new javax.swing.JTextField();
        viewBookings31 = new javax.swing.JButton();
        jLabel77 = new javax.swing.JLabel();
        uLeadAttendantID = new javax.swing.JTextField();
        viewBookings32 = new javax.swing.JButton();
        jLabel44 = new javax.swing.JLabel();
        cFlightAttendantID = new javax.swing.JTextField();
        passengerManager = new javax.swing.JPanel();
        createPassengerButton = new javax.swing.JButton();
        cPassportNumber = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        cLastName = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        cFirstName = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        cBirthdate = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        cContactNo = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        cVIPStatus = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        dPassengerID = new javax.swing.JTextField();
        deletePassengerButton = new javax.swing.JButton();
        cEmailAddress = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        uPassportNumber = new javax.swing.JTextField();
        viewBookings3 = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        uLastName = new javax.swing.JTextField();
        viewBookings4 = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        uFirstName = new javax.swing.JTextField();
        viewBookings5 = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        uPassengerID = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        uBirthdate = new javax.swing.JTextField();
        viewBookings6 = new javax.swing.JButton();
        jLabel15 = new javax.swing.JLabel();
        uContactNo = new javax.swing.JTextField();
        viewBookings7 = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();
        uEmailAddress = new javax.swing.JTextField();
        viewBookings8 = new javax.swing.JButton();
        jLabel17 = new javax.swing.JLabel();
        uVIPStatus = new javax.swing.JComboBox<>();
        viewBookings9 = new javax.swing.JButton();
        jLabel18 = new javax.swing.JLabel();
        bookingManager = new javax.swing.JPanel();
        createPassengerButton3 = new javax.swing.JButton();
        cBPassengerID = new javax.swing.JTextField();
        jLabel55 = new javax.swing.JLabel();
        jLabel56 = new javax.swing.JLabel();
        jLabel57 = new javax.swing.JLabel();
        cBFlightID = new javax.swing.JTextField();
        jLabel58 = new javax.swing.JLabel();
        cCheckInDate = new javax.swing.JTextField();
        jLabel59 = new javax.swing.JLabel();
        cSeatNo = new javax.swing.JTextField();
        jLabel60 = new javax.swing.JLabel();
        jLabel61 = new javax.swing.JLabel();
        jLabel62 = new javax.swing.JLabel();
        cSeatClass = new javax.swing.JComboBox<>();
        jLabel63 = new javax.swing.JLabel();
        dBookingID = new javax.swing.JTextField();
        deletePassengerButton3 = new javax.swing.JButton();
        cBagTotal = new javax.swing.JTextField();
        jLabel64 = new javax.swing.JLabel();
        uBPassengerID = new javax.swing.JTextField();
        viewBookings24 = new javax.swing.JButton();
        jLabel65 = new javax.swing.JLabel();
        uBFlightID = new javax.swing.JTextField();
        viewBookings25 = new javax.swing.JButton();
        jLabel66 = new javax.swing.JLabel();
        uCheckInDate = new javax.swing.JTextField();
        viewBookings26 = new javax.swing.JButton();
        jLabel67 = new javax.swing.JLabel();
        uBookingID = new javax.swing.JTextField();
        jLabel68 = new javax.swing.JLabel();
        uSeatNo = new javax.swing.JTextField();
        viewBookings27 = new javax.swing.JButton();
        jLabel69 = new javax.swing.JLabel();
        viewBookings28 = new javax.swing.JButton();
        jLabel70 = new javax.swing.JLabel();
        uBagTotal = new javax.swing.JTextField();
        viewBookings29 = new javax.swing.JButton();
        jLabel71 = new javax.swing.JLabel();
        uSeatClass = new javax.swing.JComboBox<>();
        viewBookings30 = new javax.swing.JButton();
        jLabel72 = new javax.swing.JLabel();
        cFood = new javax.swing.JComboBox<>();
        uFood = new javax.swing.JComboBox<>();
        employeeView = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        employeeTable = new javax.swing.JTable();
        flightView = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        viewFlightTable = new javax.swing.JTable();
        jScrollPane9 = new javax.swing.JScrollPane();
        viewFlightPassengersTable = new javax.swing.JTable();
        manageEmployees1 = new javax.swing.JButton();
        flightID = new javax.swing.JTextField();
        jLabel80 = new javax.swing.JLabel();
        passengerView = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        viewPassengerTable = new javax.swing.JTable();
        jScrollPane10 = new javax.swing.JScrollPane();
        viewPassengerBookingsTable = new javax.swing.JTable();
        jLabel81 = new javax.swing.JLabel();
        passengerID = new javax.swing.JTextField();
        manageEmployees2 = new javax.swing.JButton();
        bookingView = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        viewBookingsTable = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        FORTable = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        RRTable = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        PRTable = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane8 = new javax.swing.JScrollPane();
        ESRTable = new javax.swing.JTable();
        Options = new javax.swing.JPanel();
        manageEmployees = new javax.swing.JButton();
        manageFlights = new javax.swing.JButton();
        managePassengers = new javax.swing.JButton();
        manageBookings = new javax.swing.JButton();
        viewEmployees = new javax.swing.JButton();
        viewFlights = new javax.swing.JButton();
        viewPassengers = new javax.swing.JButton();
        viewBookings = new javax.swing.JButton();
        generateReport = new javax.swing.JButton();
        generateReport1 = new javax.swing.JButton();
        generateReport2 = new javax.swing.JButton();
        generateReport3 = new javax.swing.JButton();
        jLabel78 = new javax.swing.JLabel();
        jLabel79 = new javax.swing.JLabel();
        year = new javax.swing.JTextField();
        month = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        background.setBackground(new java.awt.Color(204, 255, 204));
        background.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        harang.setBackground(new java.awt.Color(153, 255, 153));

        javax.swing.GroupLayout harangLayout = new javax.swing.GroupLayout(harang);
        harang.setLayout(harangLayout);
        harangLayout.setHorizontalGroup(
                harangLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 1330, Short.MAX_VALUE)
        );
        harangLayout.setVerticalGroup(
                harangLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 90, Short.MAX_VALUE)
        );

        background.add(harang, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1330, 90));

        employeeManager.setBackground(javax.swing.UIManager.getDefaults().getColor("Actions.Green"));
        employeeManager.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        createEmployeeButton.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        createEmployeeButton.setText("Create Employee");
        createEmployeeButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        createEmployeeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createEmployeeButtonActionPerformed(evt);
            }
        });
        employeeManager.add(createEmployeeButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 310, 340, 43));

        cJobTitle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cJobTitleActionPerformed(evt);
            }
        });
        employeeManager.add(cJobTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(167, 46, 255, 29));

        jLabel19.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        jLabel19.setText("Delete Employee:");
        employeeManager.add(jLabel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 450, -1, -1));

        jLabel20.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        jLabel20.setText("Job Title:");
        employeeManager.add(jLabel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(33, 47, -1, -1));

        jLabel21.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        jLabel21.setText("Last Name:");
        employeeManager.add(jLabel21, new org.netbeans.lib.awtextra.AbsoluteConstraints(33, 91, -1, -1));

        cEmpLastName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cEmpLastNameActionPerformed(evt);
            }
        });
        employeeManager.add(cEmpLastName, new org.netbeans.lib.awtextra.AbsoluteConstraints(167, 90, 255, 29));

        jLabel22.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        jLabel22.setText("First Name:");
        employeeManager.add(jLabel22, new org.netbeans.lib.awtextra.AbsoluteConstraints(33, 131, -1, -1));

        cEmpFirstName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cEmpFirstNameActionPerformed(evt);
            }
        });
        employeeManager.add(cEmpFirstName, new org.netbeans.lib.awtextra.AbsoluteConstraints(167, 130, 255, 29));

        jLabel23.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        jLabel23.setText("Hire Date:");
        employeeManager.add(jLabel23, new org.netbeans.lib.awtextra.AbsoluteConstraints(33, 175, -1, -1));

        cHireDate.setText("YYYY-MM-DD");
        cHireDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cHireDateActionPerformed(evt);
            }
        });
        employeeManager.add(cHireDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(167, 174, 255, 29));

        jLabel24.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        jLabel24.setText("Salary:");
        employeeManager.add(jLabel24, new org.netbeans.lib.awtextra.AbsoluteConstraints(33, 215, -1, -1));

        cSalary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cSalaryActionPerformed(evt);
            }
        });
        employeeManager.add(cSalary, new org.netbeans.lib.awtextra.AbsoluteConstraints(167, 214, 255, 29));

        jLabel25.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        jLabel25.setText("Department:");
        employeeManager.add(jLabel25, new org.netbeans.lib.awtextra.AbsoluteConstraints(33, 259, -1, -1));

        jLabel27.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        jLabel27.setText("Employee ID:");
        employeeManager.add(jLabel27, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 480, -1, -1));

        dEmployeeID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dEmployeeIDActionPerformed(evt);
            }
        });
        employeeManager.add(dEmployeeID, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 480, 255, 29));

        deleteEmployeeButton.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        deleteEmployeeButton.setText("Delete Employee");
        deleteEmployeeButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        deleteEmployeeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteEmployeeButtonActionPerformed(evt);
            }
        });
        employeeManager.add(deleteEmployeeButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 520, 340, 43));

        cDepartment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cDepartmentActionPerformed(evt);
            }
        });
        employeeManager.add(cDepartment, new org.netbeans.lib.awtextra.AbsoluteConstraints(167, 258, 255, 29));

        jLabel28.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        jLabel28.setText("Job Title");
        employeeManager.add(jLabel28, new org.netbeans.lib.awtextra.AbsoluteConstraints(449, 47, -1, -1));

        uJobTitle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uJobTitleActionPerformed(evt);
            }
        });
        employeeManager.add(uJobTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(565, 46, 255, 29));

        updateJobTitleButton.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        updateJobTitleButton.setText("Update Job Title");
        updateJobTitleButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        updateJobTitleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateJobTitleButtonActionPerformed(evt);
            }
        });
        employeeManager.add(updateJobTitleButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 81, 340, 43));

        jLabel29.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        jLabel29.setText("Last Name:");
        employeeManager.add(jLabel29, new org.netbeans.lib.awtextra.AbsoluteConstraints(449, 131, -1, -1));

        uEmpLastName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uEmpLastNameActionPerformed(evt);
            }
        });
        employeeManager.add(uEmpLastName, new org.netbeans.lib.awtextra.AbsoluteConstraints(565, 130, 255, 29));

        viewBookings11.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        viewBookings11.setText("Update Last Name");
        viewBookings11.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        viewBookings11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewBookings11ActionPerformed(evt);
            }
        });
        employeeManager.add(viewBookings11, new org.netbeans.lib.awtextra.AbsoluteConstraints(512, 165, 340, 43));

        jLabel30.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        jLabel30.setText("First Name:");
        employeeManager.add(jLabel30, new org.netbeans.lib.awtextra.AbsoluteConstraints(449, 215, -1, -1));

        uEmpFirstName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uEmpFirstNameActionPerformed(evt);
            }
        });
        employeeManager.add(uEmpFirstName, new org.netbeans.lib.awtextra.AbsoluteConstraints(565, 214, 255, 29));

        viewBookings12.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        viewBookings12.setText("Update First Name");
        viewBookings12.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        viewBookings12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewBookings12ActionPerformed(evt);
            }
        });
        employeeManager.add(viewBookings12, new org.netbeans.lib.awtextra.AbsoluteConstraints(511, 249, 340, 43));

        jLabel31.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        jLabel31.setText("Employee ID:");
        employeeManager.add(jLabel31, new org.netbeans.lib.awtextra.AbsoluteConstraints(449, 12, -1, -1));

        uEmployeeID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uEmployeeIDActionPerformed(evt);
            }
        });
        employeeManager.add(uEmployeeID, new org.netbeans.lib.awtextra.AbsoluteConstraints(565, 11, 255, 29));

        jLabel32.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        jLabel32.setText("Hire Date:");
        employeeManager.add(jLabel32, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 299, -1, -1));

        uHireDate.setText("YYYY-MM-DD");
        uHireDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uHireDateActionPerformed(evt);
            }
        });
        employeeManager.add(uHireDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(565, 298, 255, 29));

        viewBookings13.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        viewBookings13.setText("Update Hire Date");
        viewBookings13.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        viewBookings13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewBookings13ActionPerformed(evt);
            }
        });
        employeeManager.add(viewBookings13, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 333, 340, 43));

        jLabel33.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        jLabel33.setText("Salary:");
        employeeManager.add(jLabel33, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 389, -1, -1));

        uSalary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uSalaryActionPerformed(evt);
            }
        });
        employeeManager.add(uSalary, new org.netbeans.lib.awtextra.AbsoluteConstraints(564, 388, 255, 29));

        viewBookings14.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        viewBookings14.setText("Update Salary");
        viewBookings14.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        viewBookings14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewBookings14ActionPerformed(evt);
            }
        });
        employeeManager.add(viewBookings14, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 423, 340, 43));

        jLabel34.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        jLabel34.setText("Department:");
        employeeManager.add(jLabel34, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 479, -1, -1));

        uDepartment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uDepartmentActionPerformed(evt);
            }
        });
        employeeManager.add(uDepartment, new org.netbeans.lib.awtextra.AbsoluteConstraints(565, 478, 255, 29));

        viewBookings15.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        viewBookings15.setText("Update Department");
        viewBookings15.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        viewBookings15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewBookings15ActionPerformed(evt);
            }
        });
        employeeManager.add(viewBookings15, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 520, 340, 43));

        jLabel36.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        jLabel36.setText("Create Employee:");
        employeeManager.add(jLabel36, new org.netbeans.lib.awtextra.AbsoluteConstraints(33, 18, -1, -1));

        jTabbedPane1.addTab("emp", employeeManager);

        flightManager.setBackground(javax.swing.UIManager.getDefaults().getColor("Actions.Green"));
        flightManager.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        createPassengerButton2.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        createPassengerButton2.setText("Create Flight");
        createPassengerButton2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        createPassengerButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createPassengerButton2ActionPerformed(evt);
            }
        });
        flightManager.add(createPassengerButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 480, 340, 43));

        cGateNumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cGateNumberActionPerformed(evt);
            }
        });
        flightManager.add(cGateNumber, new org.netbeans.lib.awtextra.AbsoluteConstraints(185, 46, 255, 29));

        jLabel37.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        jLabel37.setText("Delete Flight:");
        flightManager.add(jLabel37, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 600, -1, -1));

        jLabel38.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        jLabel38.setText("Gate Number:");
        flightManager.add(jLabel38, new org.netbeans.lib.awtextra.AbsoluteConstraints(33, 47, -1, -1));

        jLabel39.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        jLabel39.setText("Destination:");
        flightManager.add(jLabel39, new org.netbeans.lib.awtextra.AbsoluteConstraints(33, 91, -1, -1));

        cDestination.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cDestinationActionPerformed(evt);
            }
        });
        flightManager.add(cDestination, new org.netbeans.lib.awtextra.AbsoluteConstraints(185, 90, 255, 29));

        jLabel40.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        jLabel40.setText("Origin:");
        flightManager.add(jLabel40, new org.netbeans.lib.awtextra.AbsoluteConstraints(33, 131, -1, -1));

        cOrigin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cOriginActionPerformed(evt);
            }
        });
        flightManager.add(cOrigin, new org.netbeans.lib.awtextra.AbsoluteConstraints(185, 130, 255, 29));

        jLabel41.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        jLabel41.setText("Departure:");
        flightManager.add(jLabel41, new org.netbeans.lib.awtextra.AbsoluteConstraints(33, 175, -1, -1));

        cDeparture.setText("YYYY-MM-DD HH:MM:SS");
        cDeparture.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cDepartureActionPerformed(evt);
            }
        });
        flightManager.add(cDeparture, new org.netbeans.lib.awtextra.AbsoluteConstraints(185, 174, 255, 29));

        jLabel42.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        jLabel42.setText("Arrival:");
        flightManager.add(jLabel42, new org.netbeans.lib.awtextra.AbsoluteConstraints(33, 215, -1, -1));

        cArrival.setText("YYYY-MM-DD HH:MM:SS");
        cArrival.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cArrivalActionPerformed(evt);
            }
        });
        flightManager.add(cArrival, new org.netbeans.lib.awtextra.AbsoluteConstraints(185, 214, 255, 29));

        jLabel43.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        jLabel43.setText("Base Price:");
        flightManager.add(jLabel43, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 430, -1, -1));

        jLabel45.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        jLabel45.setText("Flight ID:");
        flightManager.add(jLabel45, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 630, -1, -1));

        dFlightID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dFlightIDActionPerformed(evt);
            }
        });
        flightManager.add(dFlightID, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 630, 255, 29));

        deletePassengerButton2.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        deletePassengerButton2.setText("Delete Flight");
        deletePassengerButton2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        deletePassengerButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletePassengerButton2ActionPerformed(evt);
            }
        });
        flightManager.add(deletePassengerButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 670, 340, 43));

        cBasePrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cBasePriceActionPerformed(evt);
            }
        });
        flightManager.add(cBasePrice, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 430, 255, 29));

        jLabel46.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        jLabel46.setText("Gate Number:");
        flightManager.add(jLabel46, new org.netbeans.lib.awtextra.AbsoluteConstraints(458, 47, -1, -1));

        uGateNumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uGateNumberActionPerformed(evt);
            }
        });
        flightManager.add(uGateNumber, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 46, 255, 29));

        viewBookings17.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        viewBookings17.setText("Update Gate Number");
        viewBookings17.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        viewBookings17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewBookings17ActionPerformed(evt);
            }
        });
        flightManager.add(viewBookings17, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 81, 340, 43));

        jLabel47.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        jLabel47.setText("Destination:");
        flightManager.add(jLabel47, new org.netbeans.lib.awtextra.AbsoluteConstraints(458, 131, -1, -1));

        uDestination.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uDestinationActionPerformed(evt);
            }
        });
        flightManager.add(uDestination, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 130, 255, 29));

        viewBookings18.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        viewBookings18.setText("Update Destination");
        viewBookings18.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        viewBookings18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewBookings18ActionPerformed(evt);
            }
        });
        flightManager.add(viewBookings18, new org.netbeans.lib.awtextra.AbsoluteConstraints(512, 165, 340, 43));

        jLabel48.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        jLabel48.setText("Origin:");
        flightManager.add(jLabel48, new org.netbeans.lib.awtextra.AbsoluteConstraints(458, 215, -1, -1));

        uOrigin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uOriginActionPerformed(evt);
            }
        });
        flightManager.add(uOrigin, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 214, 255, 29));

        viewBookings19.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        viewBookings19.setText("Update Origin");
        viewBookings19.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        viewBookings19.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewBookings19ActionPerformed(evt);
            }
        });
        flightManager.add(viewBookings19, new org.netbeans.lib.awtextra.AbsoluteConstraints(511, 249, 340, 43));

        jLabel49.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        jLabel49.setText("Flight ID:");
        flightManager.add(jLabel49, new org.netbeans.lib.awtextra.AbsoluteConstraints(458, 12, -1, -1));

        uFlightID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uFlightIDActionPerformed(evt);
            }
        });
        flightManager.add(uFlightID, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 11, 255, 29));

        jLabel50.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        jLabel50.setText("Departure:");
        flightManager.add(jLabel50, new org.netbeans.lib.awtextra.AbsoluteConstraints(458, 300, -1, -1));

        uDeparture.setText("YYYY-MM-DD HH:MM:SS");
        uDeparture.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uDepartureActionPerformed(evt);
            }
        });
        flightManager.add(uDeparture, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 299, 255, 29));

        viewBookings20.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        viewBookings20.setText("Update Departure");
        viewBookings20.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        viewBookings20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewBookings20ActionPerformed(evt);
            }
        });
        flightManager.add(viewBookings20, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 334, 340, 43));

        jLabel51.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        jLabel51.setText("Arrival:");
        flightManager.add(jLabel51, new org.netbeans.lib.awtextra.AbsoluteConstraints(458, 389, -1, -1));

        uArrival.setText("YYYY-MM-DD HH:MM:SS");
        uArrival.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uArrivalActionPerformed(evt);
            }
        });
        flightManager.add(uArrival, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 382, 255, 29));

        viewBookings21.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        viewBookings21.setText("Update Arrival");
        viewBookings21.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        viewBookings21.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewBookings21ActionPerformed(evt);
            }
        });
        flightManager.add(viewBookings21, new org.netbeans.lib.awtextra.AbsoluteConstraints(516, 417, 340, 43));

        jLabel52.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        jLabel52.setText("Pilot ID:");
        flightManager.add(jLabel52, new org.netbeans.lib.awtextra.AbsoluteConstraints(458, 467, -1, -1));

        uFlightAttendantID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uFlightAttendantIDActionPerformed(evt);
            }
        });
        flightManager.add(uFlightAttendantID, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 740, 255, 29));

        viewBookings22.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        viewBookings22.setText("Update Pilot ID");
        viewBookings22.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        viewBookings22.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewBookings22ActionPerformed(evt);
            }
        });
        flightManager.add(viewBookings22, new org.netbeans.lib.awtextra.AbsoluteConstraints(512, 501, 340, 43));

        jLabel53.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        jLabel53.setText("Flight Attendant ID:");
        flightManager.add(jLabel53, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 740, -1, 36));

        viewBookings23.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        viewBookings23.setText("Update Flight Attendant ID");
        viewBookings23.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        viewBookings23.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewBookings23ActionPerformed(evt);
            }
        });
        flightManager.add(viewBookings23, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 780, 340, 43));

        jLabel54.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        jLabel54.setText("Create Flight:");
        flightManager.add(jLabel54, new org.netbeans.lib.awtextra.AbsoluteConstraints(33, 18, -1, -1));

        jLabel73.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        jLabel73.setText("Pilot ID:");
        flightManager.add(jLabel73, new org.netbeans.lib.awtextra.AbsoluteConstraints(33, 259, -1, -1));

        jLabel74.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        jLabel74.setText("Copilot ID:");
        flightManager.add(jLabel74, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 300, -1, -1));

        jLabel75.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        jLabel75.setText("Lead Attendant ID:");
        flightManager.add(jLabel75, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 340, -1, -1));

        cPilotID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cPilotIDActionPerformed(evt);
            }
        });
        flightManager.add(cPilotID, new org.netbeans.lib.awtextra.AbsoluteConstraints(185, 258, 255, 29));

        cCopilotID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cCopilotIDActionPerformed(evt);
            }
        });
        flightManager.add(cCopilotID, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 300, 255, 29));

        cLeadAttendantID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cLeadAttendantIDActionPerformed(evt);
            }
        });
        flightManager.add(cLeadAttendantID, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 340, 255, 29));

        uPilotID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uPilotIDActionPerformed(evt);
            }
        });
        flightManager.add(uPilotID, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 466, 255, 29));

        jLabel76.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        jLabel76.setText("Copilot ID:");
        flightManager.add(jLabel76, new org.netbeans.lib.awtextra.AbsoluteConstraints(458, 550, -1, 36));

        uCopilotID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uCopilotIDActionPerformed(evt);
            }
        });
        flightManager.add(uCopilotID, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 550, 255, 29));

        viewBookings31.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        viewBookings31.setText("Update Copilot ID");
        viewBookings31.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        viewBookings31.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewBookings31ActionPerformed(evt);
            }
        });
        flightManager.add(viewBookings31, new org.netbeans.lib.awtextra.AbsoluteConstraints(511, 586, 340, 43));

        jLabel77.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        jLabel77.setText("Lead Attendant ID:");
        flightManager.add(jLabel77, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 640, -1, 36));

        uLeadAttendantID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uLeadAttendantIDActionPerformed(evt);
            }
        });
        flightManager.add(uLeadAttendantID, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 640, 255, 29));

        viewBookings32.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        viewBookings32.setText("Update Lead Attendant ID");
        viewBookings32.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        viewBookings32.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewBookings32ActionPerformed(evt);
            }
        });
        flightManager.add(viewBookings32, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 680, 340, 43));

        jLabel44.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        jLabel44.setText("Flight Attendant ID:");
        flightManager.add(jLabel44, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 380, -1, -1));

        cFlightAttendantID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cFlightAttendantIDActionPerformed(evt);
            }
        });
        flightManager.add(cFlightAttendantID, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 380, 255, 29));

        jTabbedPane1.addTab("fli", flightManager);

        passengerManager.setBackground(javax.swing.UIManager.getDefaults().getColor("Actions.Green"));
        passengerManager.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        createPassengerButton.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        createPassengerButton.setText("Create Passenger");
        createPassengerButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        createPassengerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createPassengerButtonActionPerformed(evt);
            }
        });
        passengerManager.add(createPassengerButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(33, 334, 340, 43));

        cPassportNumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cPassportNumberActionPerformed(evt);
            }
        });
        passengerManager.add(cPassportNumber, new org.netbeans.lib.awtextra.AbsoluteConstraints(185, 46, 255, 29));

        jLabel1.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        jLabel1.setText("Delete Passenger:");
        passengerManager.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(33, 498, -1, -1));

        jLabel2.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        jLabel2.setText("Passport Number:");
        passengerManager.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(33, 47, -1, -1));

        jLabel3.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        jLabel3.setText("Last Name:");
        passengerManager.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(33, 91, -1, -1));

        cLastName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cLastNameActionPerformed(evt);
            }
        });
        passengerManager.add(cLastName, new org.netbeans.lib.awtextra.AbsoluteConstraints(185, 90, 255, 29));

        jLabel4.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        jLabel4.setText("First Name:");
        passengerManager.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(33, 131, -1, -1));

        cFirstName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cFirstNameActionPerformed(evt);
            }
        });
        passengerManager.add(cFirstName, new org.netbeans.lib.awtextra.AbsoluteConstraints(185, 130, 255, 29));

        jLabel5.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        jLabel5.setText("Birthdate:");
        passengerManager.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(33, 175, -1, -1));

        cBirthdate.setText("YYYY-MM-DD");
        cBirthdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cBirthdateActionPerformed(evt);
            }
        });
        passengerManager.add(cBirthdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(185, 174, 255, 29));

        jLabel6.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        jLabel6.setText("Contact no:");
        passengerManager.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(33, 215, -1, -1));

        cContactNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cContactNoActionPerformed(evt);
            }
        });
        passengerManager.add(cContactNo, new org.netbeans.lib.awtextra.AbsoluteConstraints(185, 214, 255, 29));

        jLabel7.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        jLabel7.setText("Email Address:");
        passengerManager.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(33, 259, -1, -1));

        jLabel8.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        jLabel8.setText("VIP Status:");
        passengerManager.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(33, 300, -1, -1));

        cVIPStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "NULL", "Silver", "Gold", "Platinum", "Diamond" }));
        passengerManager.add(cVIPStatus, new org.netbeans.lib.awtextra.AbsoluteConstraints(185, 298, 255, 30));

        jLabel9.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        jLabel9.setText("Passenger ID:");
        passengerManager.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(33, 527, -1, -1));

        dPassengerID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dPassengerIDActionPerformed(evt);
            }
        });
        passengerManager.add(dPassengerID, new org.netbeans.lib.awtextra.AbsoluteConstraints(185, 526, 255, 29));

        deletePassengerButton.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        deletePassengerButton.setText("Delete Passenger");
        deletePassengerButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        deletePassengerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletePassengerButtonActionPerformed(evt);
            }
        });
        passengerManager.add(deletePassengerButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(33, 582, 340, 43));

        cEmailAddress.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cEmailAddressActionPerformed(evt);
            }
        });
        passengerManager.add(cEmailAddress, new org.netbeans.lib.awtextra.AbsoluteConstraints(185, 258, 255, 29));

        jLabel10.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        jLabel10.setText("Passport Number:");
        passengerManager.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(458, 47, -1, -1));

        uPassportNumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uPassportNumberActionPerformed(evt);
            }
        });
        passengerManager.add(uPassportNumber, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 46, 255, 29));

        viewBookings3.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        viewBookings3.setText("Update Passport Number");
        viewBookings3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        viewBookings3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewBookings3ActionPerformed(evt);
            }
        });
        passengerManager.add(viewBookings3, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 81, 340, 43));

        jLabel11.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        jLabel11.setText("Last Name:");
        passengerManager.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(458, 131, -1, -1));

        uLastName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uLastNameActionPerformed(evt);
            }
        });
        passengerManager.add(uLastName, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 130, 255, 29));

        viewBookings4.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        viewBookings4.setText("Update Last Name");
        viewBookings4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        viewBookings4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewBookings4ActionPerformed(evt);
            }
        });
        passengerManager.add(viewBookings4, new org.netbeans.lib.awtextra.AbsoluteConstraints(512, 165, 340, 43));

        jLabel12.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        jLabel12.setText("First Name:");
        passengerManager.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(458, 215, -1, -1));

        uFirstName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uFirstNameActionPerformed(evt);
            }
        });
        passengerManager.add(uFirstName, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 214, 255, 29));

        viewBookings5.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        viewBookings5.setText("Update First Name");
        viewBookings5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        viewBookings5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewBookings5ActionPerformed(evt);
            }
        });
        passengerManager.add(viewBookings5, new org.netbeans.lib.awtextra.AbsoluteConstraints(511, 249, 340, 43));

        jLabel13.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        jLabel13.setText("Passenger ID:");
        passengerManager.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(458, 12, -1, -1));

        uPassengerID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uPassengerIDActionPerformed(evt);
            }
        });
        passengerManager.add(uPassengerID, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 11, 255, 29));

        jLabel14.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        jLabel14.setText("Birthdate:");
        passengerManager.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(458, 300, -1, -1));

        uBirthdate.setText("YYYY-MM-DD");
        uBirthdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uBirthdateActionPerformed(evt);
            }
        });
        passengerManager.add(uBirthdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 299, 255, 29));

        viewBookings6.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        viewBookings6.setText("Update Birthdate");
        viewBookings6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        viewBookings6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewBookings6ActionPerformed(evt);
            }
        });
        passengerManager.add(viewBookings6, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 334, 340, 43));

        jLabel15.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        jLabel15.setText("Contact no:");
        passengerManager.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(458, 389, -1, -1));

        uContactNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uContactNoActionPerformed(evt);
            }
        });
        passengerManager.add(uContactNo, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 390, 255, 29));

        viewBookings7.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        viewBookings7.setText("Update Contact No");
        viewBookings7.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        viewBookings7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewBookings7ActionPerformed(evt);
            }
        });
        passengerManager.add(viewBookings7, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 430, 340, 43));

        jLabel16.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        jLabel16.setText("Email Address:");
        passengerManager.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 490, -1, -1));

        uEmailAddress.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uEmailAddressActionPerformed(evt);
            }
        });
        passengerManager.add(uEmailAddress, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 490, 255, 29));

        viewBookings8.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        viewBookings8.setText("Update Email Address");
        viewBookings8.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        viewBookings8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewBookings8ActionPerformed(evt);
            }
        });
        passengerManager.add(viewBookings8, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 530, 340, 43));

        jLabel17.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        jLabel17.setText("VIP Status:");
        passengerManager.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 530, -1, 118));

        uVIPStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "NULL", "Silver", "Gold", "Platinum", "Diamond" }));
        passengerManager.add(uVIPStatus, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 580, 255, 30));

        viewBookings9.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        viewBookings9.setText("Update VIP Status");
        viewBookings9.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        viewBookings9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewBookings9ActionPerformed(evt);
            }
        });
        passengerManager.add(viewBookings9, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 620, 340, 43));

        jLabel18.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        jLabel18.setText("Create Passenger:");
        passengerManager.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(35, 18, -1, -1));

        jTabbedPane1.addTab("pass", passengerManager);

        bookingManager.setBackground(javax.swing.UIManager.getDefaults().getColor("Actions.Green"));
        bookingManager.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        createPassengerButton3.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        createPassengerButton3.setText("Create Booking");
        createPassengerButton3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        createPassengerButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createPassengerButton3ActionPerformed(evt);
            }
        });
        bookingManager.add(createPassengerButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(33, 334, 340, 43));

        cBPassengerID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cBPassengerIDActionPerformed(evt);
            }
        });
        bookingManager.add(cBPassengerID, new org.netbeans.lib.awtextra.AbsoluteConstraints(168, 46, 255, 29));

        jLabel55.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        jLabel55.setText("Delete Booking:");
        bookingManager.add(jLabel55, new org.netbeans.lib.awtextra.AbsoluteConstraints(33, 417, -1, -1));

        jLabel56.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        jLabel56.setText("Passenger ID:");
        bookingManager.add(jLabel56, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 47, -1, -1));

        jLabel57.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        jLabel57.setText("Flight ID:");
        bookingManager.add(jLabel57, new org.netbeans.lib.awtextra.AbsoluteConstraints(33, 91, -1, -1));

        cBFlightID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cBFlightIDActionPerformed(evt);
            }
        });
        bookingManager.add(cBFlightID, new org.netbeans.lib.awtextra.AbsoluteConstraints(168, 90, 255, 29));

        jLabel58.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        jLabel58.setText("Check in Date:");
        bookingManager.add(jLabel58, new org.netbeans.lib.awtextra.AbsoluteConstraints(33, 131, -1, -1));

        cCheckInDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cCheckInDateActionPerformed(evt);
            }
        });
        bookingManager.add(cCheckInDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(168, 130, 255, 29));

        jLabel59.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        jLabel59.setText("Seat no:");
        bookingManager.add(jLabel59, new org.netbeans.lib.awtextra.AbsoluteConstraints(33, 175, -1, -1));

        cSeatNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cSeatNoActionPerformed(evt);
            }
        });
        bookingManager.add(cSeatNo, new org.netbeans.lib.awtextra.AbsoluteConstraints(168, 174, 255, 29));

        jLabel60.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        jLabel60.setText("Seat Class:");
        bookingManager.add(jLabel60, new org.netbeans.lib.awtextra.AbsoluteConstraints(33, 215, -1, -1));

        jLabel61.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        jLabel61.setText("Total Check in Bags:");
        bookingManager.add(jLabel61, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 260, -1, -1));

        jLabel62.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        jLabel62.setText("Food Order");
        bookingManager.add(jLabel62, new org.netbeans.lib.awtextra.AbsoluteConstraints(33, 300, -1, -1));

        cSeatClass.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Economy", "Business", "First" }));
        bookingManager.add(cSeatClass, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 210, 255, 30));

        jLabel63.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        jLabel63.setText("Booking ID:");
        bookingManager.add(jLabel63, new org.netbeans.lib.awtextra.AbsoluteConstraints(33, 446, -1, -1));

        dBookingID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dBookingIDActionPerformed(evt);
            }
        });
        bookingManager.add(dBookingID, new org.netbeans.lib.awtextra.AbsoluteConstraints(185, 445, 255, 29));

        deletePassengerButton3.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        deletePassengerButton3.setText("Delete Booking");
        deletePassengerButton3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        deletePassengerButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletePassengerButton3ActionPerformed(evt);
            }
        });
        bookingManager.add(deletePassengerButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(33, 501, 340, 43));

        cBagTotal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cBagTotalActionPerformed(evt);
            }
        });
        bookingManager.add(cBagTotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(185, 258, 255, 29));

        jLabel64.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        jLabel64.setText("Passenger ID:");
        bookingManager.add(jLabel64, new org.netbeans.lib.awtextra.AbsoluteConstraints(441, 47, -1, -1));

        uBPassengerID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uBPassengerIDActionPerformed(evt);
            }
        });
        bookingManager.add(uBPassengerID, new org.netbeans.lib.awtextra.AbsoluteConstraints(593, 46, 255, 29));

        viewBookings24.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        viewBookings24.setText("Update Passenger ID");
        viewBookings24.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        viewBookings24.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewBookings24ActionPerformed(evt);
            }
        });
        bookingManager.add(viewBookings24, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 81, 340, 43));

        jLabel65.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        jLabel65.setText("Flight ID:");
        bookingManager.add(jLabel65, new org.netbeans.lib.awtextra.AbsoluteConstraints(441, 131, -1, -1));

        uBFlightID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uBFlightIDActionPerformed(evt);
            }
        });
        bookingManager.add(uBFlightID, new org.netbeans.lib.awtextra.AbsoluteConstraints(593, 130, 255, 29));

        viewBookings25.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        viewBookings25.setText("Update Flight ID");
        viewBookings25.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        viewBookings25.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewBookings25ActionPerformed(evt);
            }
        });
        bookingManager.add(viewBookings25, new org.netbeans.lib.awtextra.AbsoluteConstraints(512, 165, 340, 43));

        jLabel66.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        jLabel66.setText("Check in Date:");
        bookingManager.add(jLabel66, new org.netbeans.lib.awtextra.AbsoluteConstraints(441, 215, -1, -1));

        uCheckInDate.setText("YYYY-MM-DD HH:MM:SS");
        uCheckInDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uCheckInDateActionPerformed(evt);
            }
        });
        bookingManager.add(uCheckInDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(593, 214, 255, 29));

        viewBookings26.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        viewBookings26.setText("Update Check in Date");
        viewBookings26.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        viewBookings26.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewBookings26ActionPerformed(evt);
            }
        });
        bookingManager.add(viewBookings26, new org.netbeans.lib.awtextra.AbsoluteConstraints(511, 249, 340, 43));

        jLabel67.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        jLabel67.setText("Booking ID:");
        bookingManager.add(jLabel67, new org.netbeans.lib.awtextra.AbsoluteConstraints(441, 12, -1, -1));

        uBookingID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uBookingIDActionPerformed(evt);
            }
        });
        bookingManager.add(uBookingID, new org.netbeans.lib.awtextra.AbsoluteConstraints(593, 11, 255, 29));

        jLabel68.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        jLabel68.setText("Seat no:");
        bookingManager.add(jLabel68, new org.netbeans.lib.awtextra.AbsoluteConstraints(458, 300, -1, -1));

        uSeatNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uSeatNoActionPerformed(evt);
            }
        });
        bookingManager.add(uSeatNo, new org.netbeans.lib.awtextra.AbsoluteConstraints(593, 299, 255, 29));

        viewBookings27.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        viewBookings27.setText("Update Seat No");
        viewBookings27.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        viewBookings27.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewBookings27ActionPerformed(evt);
            }
        });
        bookingManager.add(viewBookings27, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 334, 340, 43));

        jLabel69.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        jLabel69.setText("Seat Class:");
        bookingManager.add(jLabel69, new org.netbeans.lib.awtextra.AbsoluteConstraints(458, 389, -1, -1));

        viewBookings28.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        viewBookings28.setText("Update Seat Class");
        viewBookings28.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        viewBookings28.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewBookings28ActionPerformed(evt);
            }
        });
        bookingManager.add(viewBookings28, new org.netbeans.lib.awtextra.AbsoluteConstraints(516, 417, 340, 43));

        jLabel70.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        jLabel70.setText("Total Check in Bags:");
        bookingManager.add(jLabel70, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 550, -1, -1));

        uBagTotal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uBagTotalActionPerformed(evt);
            }
        });
        bookingManager.add(uBagTotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 550, 255, 29));

        viewBookings29.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        viewBookings29.setText("Update Food Order");
        viewBookings29.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        viewBookings29.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewBookings29ActionPerformed(evt);
            }
        });
        bookingManager.add(viewBookings29, new org.netbeans.lib.awtextra.AbsoluteConstraints(512, 501, 340, 43));

        jLabel71.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        jLabel71.setText("Food Order:");
        bookingManager.add(jLabel71, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 380, -1, 199));

        uSeatClass.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Economy", "Business", "First", " " }));
        bookingManager.add(uSeatClass, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 380, 255, 30));

        viewBookings30.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        viewBookings30.setText("Update Total Check in Bags");
        viewBookings30.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        viewBookings30.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewBookings30ActionPerformed(evt);
            }
        });
        bookingManager.add(viewBookings30, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 600, 340, 43));

        jLabel72.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        jLabel72.setText("Create Booking:");
        bookingManager.add(jLabel72, new org.netbeans.lib.awtextra.AbsoluteConstraints(33, 18, -1, -1));

        cFood.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Beef", "Chicken", "Pork", "Fish", "Vegan" }));
        bookingManager.add(cFood, new org.netbeans.lib.awtextra.AbsoluteConstraints(185, 298, 255, 30));

        uFood.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Beef", "Chicken", "Pork", "Fish", "Vegan" }));
        bookingManager.add(uFood, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 470, 255, 30));

        jTabbedPane1.addTab("book", bookingManager);

        employeeTable.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][] {
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null}
                },
                new String [] {
                        "employee_id", "last_name", "first_name", "job_title", "hire_date", "salary", "department"
                }
        ));
        jScrollPane2.setViewportView(employeeTable);

        javax.swing.GroupLayout employeeViewLayout = new javax.swing.GroupLayout(employeeView);
        employeeView.setLayout(employeeViewLayout);
        employeeViewLayout.setHorizontalGroup(
                employeeViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 880, Short.MAX_VALUE)
        );
        employeeViewLayout.setVerticalGroup(
                employeeViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 835, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("vEmp", employeeView);

        viewFlightTable.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][] {
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null}
                },
                new String [] {
                        "flight_id", "gate_no", "destination", "origin", "departure", "arrival", "pilot_id", "copilot_id", "lead_attendant", "flight_attendant"
                }
        ));
        jScrollPane1.setViewportView(viewFlightTable);

        viewFlightPassengersTable.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][] {
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null}
                },
                new String [] {
                        "passenger_id", "passport_number", "last_name", "first_name", "birthdate", "contact_no", "email", "vip_status"
                }
        ));
        jScrollPane9.setViewportView(viewFlightPassengersTable);

        manageEmployees1.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        manageEmployees1.setText("Find Flight");
        manageEmployees1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        manageEmployees1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manageEmployees1ActionPerformed(evt);
            }
        });

        flightID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                flightIDActionPerformed(evt);
            }
        });

        jLabel80.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        jLabel80.setText("Flight ID:");

        javax.swing.GroupLayout flightViewLayout = new javax.swing.GroupLayout(flightView);
        flightView.setLayout(flightViewLayout);
        flightViewLayout.setHorizontalGroup(
                flightViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 880, Short.MAX_VALUE)
                        .addComponent(jScrollPane9)
                        .addGroup(flightViewLayout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addComponent(jLabel80)
                                .addGap(18, 18, 18)
                                .addComponent(flightID, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(manageEmployees1, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        flightViewLayout.setVerticalGroup(
                flightViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(flightViewLayout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 389, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(flightViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, flightViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(flightID, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jLabel80))
                                        .addComponent(manageEmployees1, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 406, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jTabbedPane1.addTab("vFli", flightView);

        viewPassengerTable.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][] {
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null}
                },
                new String [] {
                        "passenger_id", "passport", "last_name", "first_name", "birthdate", "contact_no", "email", "vip_status"
                }
        ));
        jScrollPane3.setViewportView(viewPassengerTable);

        viewPassengerBookingsTable.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][] {
                        {null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null}
                },
                new String [] {
                        "booking_id", "passenger_id", "flight_id", "checkin_date", "seat_no", "seat_class", "total_cost", "food", "no_bags_checkedin"
                }
        ));
        jScrollPane10.setViewportView(viewPassengerBookingsTable);

        jLabel81.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        jLabel81.setText("Passenger ID:");

        passengerID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passengerIDActionPerformed(evt);
            }
        });

        manageEmployees2.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        manageEmployees2.setText("Find Bookings");
        manageEmployees2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        manageEmployees2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manageEmployees2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout passengerViewLayout = new javax.swing.GroupLayout(passengerView);
        passengerView.setLayout(passengerViewLayout);
        passengerViewLayout.setHorizontalGroup(
                passengerViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 880, Short.MAX_VALUE)
                        .addComponent(jScrollPane10)
                        .addGroup(passengerViewLayout.createSequentialGroup()
                                .addGap(38, 38, 38)
                                .addComponent(jLabel81)
                                .addGap(18, 18, 18)
                                .addComponent(passengerID, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(manageEmployees2, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        passengerViewLayout.setVerticalGroup(
                passengerViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(passengerViewLayout.createSequentialGroup()
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 379, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                                .addGroup(passengerViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, passengerViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(jLabel81)
                                                .addComponent(passengerID, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(manageEmployees2, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 404, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jTabbedPane1.addTab("vPass", passengerView);

        viewBookingsTable.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][] {
                        {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null}
                },
                new String [] {
                        "booking_id", "passenger_id", "flight_id", "checkin_date", "seat_no", "seat_class", "total_cost", "food", "no_checkin_baggage", "passport_no", "last_name", "first_name", "birthdate", "contact_no", "email", "vip_status"
                }
        ));
        jScrollPane4.setViewportView(viewBookingsTable);

        javax.swing.GroupLayout bookingViewLayout = new javax.swing.GroupLayout(bookingView);
        bookingView.setLayout(bookingViewLayout);
        bookingViewLayout.setHorizontalGroup(
                bookingViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 880, Short.MAX_VALUE)
        );
        bookingViewLayout.setVerticalGroup(
                bookingViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 835, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("vBook", bookingView);

        FORTable.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][] {
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null}
                },
                new String [] {
                        "flight_id", "origin", "destination", "#ofPassengers"
                }
        ));
        jScrollPane5.setViewportView(FORTable);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 880, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 835, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("FOR", jPanel1);

        RRTable.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][] {
                        {null, null, null},
                        {null, null, null},
                        {null, null, null},
                        {null, null, null}
                },
                new String [] {
                        "month", "flights", "revenue"
                }
        ));
        jScrollPane6.setViewportView(RRTable);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 880, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 835, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("RR", jPanel2);

        PRTable.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][] {
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null}
                },
                new String [] {
                        "last_name", "first_name", "email", "vip_status", "totalBookings"
                }
        ));
        jScrollPane7.setViewportView(PRTable);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
                jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 880, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
                jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 835, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("PR", jPanel3);

        ESRTable.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][] {
                        {null, null, null},
                        {null, null, null},
                        {null, null, null},
                        {null, null, null}
                },
                new String [] {
                        "employee_id", "num_tasks", "total_revenue"
                }
        ));
        jScrollPane8.setViewportView(ESRTable);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
                jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 880, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
                jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 835, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("ESR", jPanel4);

        background.add(jTabbedPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 50, 880, 870));

        Options.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Options:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Cambria", 0, 24))); // NOI18N
        Options.setOpaque(false);

        manageEmployees.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        manageEmployees.setText("Manage Employees");
        manageEmployees.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        manageEmployees.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manageEmployeesActionPerformed(evt);
            }
        });

        manageFlights.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        manageFlights.setText("Manage Flights");
        manageFlights.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        manageFlights.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manageFlightsActionPerformed(evt);
            }
        });

        managePassengers.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        managePassengers.setText("Manage Passengers");
        managePassengers.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        managePassengers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                managePassengersActionPerformed(evt);
            }
        });

        manageBookings.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        manageBookings.setText("Manage Bookings");
        manageBookings.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        manageBookings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manageBookingsActionPerformed(evt);
            }
        });

        viewEmployees.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        viewEmployees.setText("View Employees");
        viewEmployees.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        viewEmployees.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewEmployeesActionPerformed(evt);
            }
        });

        viewFlights.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        viewFlights.setText("View Flights");
        viewFlights.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        viewFlights.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewFlightsActionPerformed(evt);
            }
        });

        viewPassengers.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        viewPassengers.setText("View Passengers");
        viewPassengers.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        viewPassengers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewPassengersActionPerformed(evt);
            }
        });

        viewBookings.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        viewBookings.setText("View Bookings");
        viewBookings.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        viewBookings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewBookingsActionPerformed(evt);
            }
        });

        generateReport.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        generateReport.setText("Generate Flight Occupancy Report");
        generateReport.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        generateReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateReportActionPerformed(evt);
            }
        });

        generateReport1.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        generateReport1.setText("Generate Revenue Report");
        generateReport1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        generateReport1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateReport1ActionPerformed(evt);
            }
        });

        generateReport2.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        generateReport2.setText("Generate Passenger Report");
        generateReport2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        generateReport2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateReport2ActionPerformed(evt);
            }
        });

        generateReport3.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        generateReport3.setText("Generate Employee Statistics Report");
        generateReport3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        generateReport3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateReport3ActionPerformed(evt);
            }
        });

        jLabel78.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        jLabel78.setText("Month:");

        jLabel79.setFont(new java.awt.Font("Cambria", 0, 18)); // NOI18N
        jLabel79.setText("Year:");

        year.setText("YYYY");
        year.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yearActionPerformed(evt);
            }
        });

        month.setText("MM");
        month.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                monthActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout OptionsLayout = new javax.swing.GroupLayout(Options);
        Options.setLayout(OptionsLayout);
        OptionsLayout.setHorizontalGroup(
                OptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, OptionsLayout.createSequentialGroup()
                                .addContainerGap(34, Short.MAX_VALUE)
                                .addGroup(OptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(OptionsLayout.createSequentialGroup()
                                                .addComponent(jLabel78)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(month, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, OptionsLayout.createSequentialGroup()
                                                .addComponent(jLabel79)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(year, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(generateReport3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(generateReport2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(generateReport1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(generateReport, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(viewBookings, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(viewPassengers, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(viewFlights, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(viewEmployees, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(manageBookings, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(managePassengers, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(manageFlights, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(manageEmployees, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(26, 26, 26))
        );
        OptionsLayout.setVerticalGroup(
                OptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(OptionsLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(manageEmployees, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(manageFlights, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(managePassengers, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(manageBookings, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(31, 31, 31)
                                .addComponent(viewEmployees, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(viewFlights, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(viewPassengers, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(viewBookings, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 54, Short.MAX_VALUE)
                                .addGroup(OptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel79)
                                        .addComponent(year, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(OptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel78)
                                        .addComponent(month, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(generateReport, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(generateReport1, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(generateReport2, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(generateReport3, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(17, 17, 17))
        );

        background.add(Options, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 110, 410, 790));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(background, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(background, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>

    private void manageEmployeesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manageEmployeesActionPerformed
        jTabbedPane1.setSelectedIndex(0);
    }//GEN-LAST:event_manageEmployeesActionPerformed

    private void manageFlightsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manageFlightsActionPerformed
        jTabbedPane1.setSelectedIndex(1);
    }//GEN-LAST:event_manageFlightsActionPerformed

    private void managePassengersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_managePassengersActionPerformed
        jTabbedPane1.setSelectedIndex(2);
    }//GEN-LAST:event_managePassengersActionPerformed

    private void manageBookingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manageBookingsActionPerformed
        jTabbedPane1.setSelectedIndex(3);
    }//GEN-LAST:event_manageBookingsActionPerformed

    private void viewEmployeesActionPerformed(java.awt.event.ActionEvent evt) {
        jTabbedPane1.setSelectedIndex(4);

        DefaultTableModel table = (DefaultTableModel) employeeTable.getModel();

        table.setRowCount(0);

        for(int i = 0; i < employees.size(); i++){
            table.addRow(new Object[]{
                    employees.get(i).getID(),
                    employees.get(i).getLast_name(),
                    employees.get(i).getFirst_name(),
                    employees.get(i).getJob_title(),
                    employees.get(i).getHire_date(),
                    employees.get(i).getSalary(),
                    employees.get(i).getDepartment()});
        }

    }

    private void viewFlightsActionPerformed(java.awt.event.ActionEvent evt) {
        jTabbedPane1.setSelectedIndex(5);

        viewFlight.clear();

        try {
            String query = "SELECT * FROM flights;";
            String query2 = "SELECT * FROM passengers p " +
                    "JOIN bookings b ON p.passenger_id = b.passenger_id " +
                    "WHERE b.flight_id = ?;";

            PreparedStatement stmt = this.con.prepareStatement(query);
            PreparedStatement stmt2 = this.con.prepareStatement(query2);

            ResultSet rs = stmt.executeQuery();

            ArrayList<Passenger> arrayHolder = new ArrayList<>();

            while(rs.next()) {
                stmt2.setInt(1, rs.getInt("flight_id"));
                ResultSet rs2 = stmt2.executeQuery();

                arrayHolder.clear();

                while (rs2.next()) {
                    Passenger elementHolder = new Passenger(rs2.getInt("passenger_id"),
                            rs2.getString("passport_number"),
                            rs2.getString("last_name"),
                            rs2.getString("first_name"),
                            rs2.getString("birthdate"),
                            rs2.getLong("contact_no"),
                            rs2.getString("email_address"),
                            rs2.getString("vip_status"));

                    arrayHolder.add(elementHolder);
                }

                ViewFlight holder = new ViewFlight(rs.getInt("flight_id"),
                        rs.getInt("gate_number"),
                        rs.getString("destination"),
                        rs.getString("origin"),
                        rs.getString("departure"),
                        rs.getString("arrival"),
                        rs.getInt("pilot_id"),
                        rs.getInt("copilot_id"),
                        rs.getInt("lead_attendant"),
                        rs.getInt("flight_attendant"),
                        arrayHolder);

                viewFlight.add(holder);
            }
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(this, "Error generating report", "Try again", JOptionPane.ERROR_MESSAGE);
            System.out.println(e.getMessage());
        }

        DefaultTableModel table = (DefaultTableModel) viewFlightTable.getModel();

        table.setRowCount(0);

        for(int i = 0; i < viewFlight.size(); i++){
            table.addRow(new Object[]{
                    viewFlight.get(i).getFlight_id(),
                    viewFlight.get(i).getGate_number(),
                    viewFlight.get(i).getDestination(),
                    viewFlight.get(i).getOrigin(),
                    viewFlight.get(i).getDeparture(),
                    viewFlight.get(i).getArrival(),
                    viewFlight.get(i).getPilot_id(),
                    viewFlight.get(i).getCopilot_id(),
                    viewFlight.get(i).getLead_attendant(),
                    viewFlight.get(i).getFlight_attendant()});
        }

    }

    private void viewPassengersActionPerformed(java.awt.event.ActionEvent evt) {
        jTabbedPane1.setSelectedIndex(6);

        viewPassenger.clear();

        try {
            String query = "SELECT * FROM passengers;";
            String query2 = "SELECT * FROM bookings b " +
                    "JOIN passengers p ON b.passenger_id = p.passenger_id " +
                    "WHERE b.passenger_id = ?";

            PreparedStatement stmt = con.prepareStatement(query);
            PreparedStatement stmt2 = con.prepareStatement(query2);

            ResultSet rs = stmt.executeQuery();

            ArrayList<Booking> arrayHolder = new ArrayList<>();

            while(rs.next()) {
                stmt2.setInt(1, rs.getInt("passenger_id"));
                ResultSet rs2 = stmt2.executeQuery();

                arrayHolder.clear();

                while (rs2.next()) {
                    System.out.println("CHECKING: " + rs.getInt("passenger_id"));
                    Booking elementHolder = new Booking(rs2.getInt("ref_id"),
                            rs2.getInt("passenger_id"),
                            rs2.getInt("flight_id"),
                            rs2.getString("checkin_date"),
                            rs2.getString("seat_no"),
                            rs2.getString("seat_class"),
                            rs2.getDouble("total_cost"),
                            rs2.getString("food_order"),
                            rs2.getInt("total_checkin_bags"));

                    arrayHolder.add(elementHolder);
                }

                ViewPassenger holder = new ViewPassenger(rs.getInt("passenger_id"),
                        rs.getString("passport_number"),
                        rs.getString("last_name"),
                        rs.getString("first_name"),
                        rs.getString("birthdate"),
                        rs.getLong("contact_no"),
                        rs.getString("email_address"),
                        rs.getString("vip_status"),
                        arrayHolder);

                viewPassenger.add(holder);
            }
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(this, "Error generating report", "Try again", JOptionPane.ERROR_MESSAGE);
            System.out.println(e.getMessage());
        }

        DefaultTableModel table = (DefaultTableModel) viewPassengerTable.getModel();

        table.setRowCount(0);

        for(int i = 0; i < viewPassenger.size(); i++){
            table.addRow(new Object[]{
                    viewPassenger.get(i).getID(),
                    viewPassenger.get(i).getPassport_number(),
                    viewPassenger.get(i).getLast_name(),
                    viewPassenger.get(i).getFirst_name(),
                    viewPassenger.get(i).getBirthdate(),
                    viewPassenger.get(i).getContact_no(),
                    viewPassenger.get(i).getEmail_address(),
                    viewPassenger.get(i).getVip_status()});
        }
    }

    private void viewBookingsActionPerformed(java.awt.event.ActionEvent evt) {
        jTabbedPane1.setSelectedIndex(7);

        viewBooking.clear();

        try {
            String query = "SELECT b.ref_id, b.passenger_id, b.flight_id, b.checkin_date, b.seat_no, " +
                    "b.seat_class, b.total_cost, b.food_order, b.total_checkin_bags, p.last_name, p.first_name, " +
                    "p.birthdate, p.email_address, p.vip_status, p.contact_no, p.passport_number " +
                    "FROM bookings b JOIN passengers p ON b.passenger_id = p.passenger_id;";

            PreparedStatement stmt = con.prepareStatement(query);

            ResultSet rs = stmt.executeQuery();

            while(rs.next()) {
                ViewBooking holder = new ViewBooking(rs.getInt("ref_id"),
                        rs.getInt("passenger_id"),
                        rs.getInt("flight_id"),
                        rs.getString("checkin_date"),
                        rs.getString("seat_no"),
                        rs.getString("seat_class"),
                        rs.getDouble("total_cost"),
                        rs.getString("food_order"),
                        rs.getInt("total_checkin_bags"),
                        rs.getString("passport_number"),
                        rs.getString("last_name"),
                        rs.getString("first_name"),
                        rs.getString("birthdate"),
                        rs.getInt("contact_no"),
                        rs.getString("email_address"),
                        rs.getString("vip_status"));

                viewBooking.add(holder);
            }
        }
        catch(Exception e){
            System.out.println(e.getMessage());
            JOptionPane.showMessageDialog(this, "Error generating report", "Try again", JOptionPane.ERROR_MESSAGE);
        }

        DefaultTableModel table = (DefaultTableModel) viewBookingsTable.getModel();
        table.setRowCount(0);
        for(int i = 0; i < viewBooking.size(); i++){
            table.addRow(new Object[]{
                    viewBooking.get(i).getID(),
                    viewBooking.get(i).getPassenger_id(),
                    viewBooking.get(i).getFlight_id(),
                    viewBooking.get(i).getCheckin_date(),
                    viewBooking.get(i).getSeat_no(),
                    viewBooking.get(i).getSeat_class(),
                    viewBooking.get(i).getTotal_cost(),
                    viewBooking.get(i).getFood_order(),
                    viewBooking.get(i).getTotal_checkin_bags(),
                    viewBooking.get(i).getPassport_number(),
                    viewBooking.get(i).getLast_name(),
                    viewBooking.get(i).getFirst_name(),
                    viewBooking.get(i).getBirthdate(),
                    viewBooking.get(i).getContact_no(),
                    viewBooking.get(i).getEmail_address(),
                    viewBooking.get(i).getVip_status()});
        }
    }


    private void createPassengerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createPassengerButtonActionPerformed
        String passport_number = cPassportNumber.getText();
        String last_name = cLastName.getText();
        String first_name = cFirstName.getText();
        String birthdate = cBirthdate.getText();
        String contact_noString = cContactNo.getText();
        String email_address = cEmailAddress.getText();
        String vip_status = cVIPStatus.getSelectedItem().toString();


        if (passport_number.isEmpty() || last_name.isEmpty() || first_name.isEmpty() || birthdate.isEmpty() || contact_noString.isEmpty() || email_address.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter all fields", "Try again", JOptionPane.ERROR_MESSAGE);
        } else {
            try {
                String insertPassengerSQL = "INSERT INTO passengers (passport_number, last_name, first_name, birthdate, contact_no, email_address, vip_status) VALUES (?, ?, ?, ?, ?, ?, ?)";

                try (PreparedStatement stmt = con.prepareStatement(insertPassengerSQL)) {

                    stmt.setString(1, passport_number);
                    stmt.setString(2, last_name);
                    stmt.setString(3, first_name);
                    stmt.setString(4, birthdate);
                    stmt.setLong(5, Long.parseLong(contact_noString));
                    stmt.setString(6, email_address);
                    stmt.setString(7, vip_status);


                    stmt.executeUpdate();


                    JOptionPane.showMessageDialog(this, "Passenger created");
                } catch (SQLException e) {
                    JOptionPane.showMessageDialog(this, "Error creating passenger", "Try again", JOptionPane.ERROR_MESSAGE);
                    e.printStackTrace();
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Database connection failed", "Try again", JOptionPane.ERROR_MESSAGE);
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_createPassengerButtonActionPerformed


    private void cPassportNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cPassportNumberActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cPassportNumberActionPerformed

    private void cLastNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cLastNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cLastNameActionPerformed

    private void cFirstNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cFirstNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cFirstNameActionPerformed

    private void cBirthdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cBirthdateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cBirthdateActionPerformed

    private void cContactNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cContactNoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cContactNoActionPerformed

    private void dPassengerIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dPassengerIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dPassengerIDActionPerformed

    private void deletePassengerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletePassengerButtonActionPerformed
        String passengerIDString = dPassengerID.getText();


        if (passengerIDString.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter required field", "Try again", JOptionPane.ERROR_MESSAGE);
            return;
        } else if (model.findPassenger(Integer.parseInt(passengerIDString)) == false) {
            JOptionPane.showMessageDialog(this, "Passenger does not exist", "Try again", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            String deletePassengerSQL = "DELETE FROM passengers WHERE passenger_id = ?";

            try (PreparedStatement stmt = con.prepareStatement(deletePassengerSQL)) {

                stmt.setInt(1, Integer.parseInt(passengerIDString));


                int rowsAffected = stmt.executeUpdate();


                if (rowsAffected > 0) {
                    JOptionPane.showMessageDialog(this, "Passenger deleted successfully.");
                } else {
                    JOptionPane.showMessageDialog(this, "Error deleting passenger: No such passenger found.", "Try again", JOptionPane.ERROR_MESSAGE);
                }
            }
        } catch (SQLException e) {
            System.out.println("Database connection failed: " + e.getMessage());
            JOptionPane.showMessageDialog(this, "Error deleting Passenger: " + e.getMessage(), "Try again", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_deletePassengerButtonActionPerformed


    private void cEmailAddressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cEmailAddressActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cEmailAddressActionPerformed

    private void uPassportNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uPassportNumberActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_uPassportNumberActionPerformed

    private void viewBookings3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewBookings3ActionPerformed
        String passenger_idString = uPassengerID.getText();
        String passport_no = uPassportNumber.getText();

        if(passenger_idString.isEmpty() || passport_no.isEmpty())
            JOptionPane.showMessageDialog(this, "Please enter required fields", "Try again", JOptionPane.ERROR_MESSAGE);
        else if(model.findPassenger(Integer.parseInt(passenger_idString)) == false)
            JOptionPane.showMessageDialog(this, "Passenger does not exist", "Try again", JOptionPane.ERROR_MESSAGE);
        else {
            try {
                model.updatePassport(Integer.parseInt(passenger_idString), passport_no);
                JOptionPane.showMessageDialog(this, "Passenger passport_no updated");
            }
            catch(Exception e){
                JOptionPane.showMessageDialog(this, "Error updating Passenger passport_no", "Try again", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_viewBookings3ActionPerformed

    private void uLastNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uLastNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_uLastNameActionPerformed

    private void viewBookings4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewBookings4ActionPerformed
        String passenger_idString = uPassengerID.getText();
        String last_name = uLastName.getText();

        if(passenger_idString.isEmpty() || last_name.isEmpty())
            JOptionPane.showMessageDialog(this, "Please enter required fields", "Try again", JOptionPane.ERROR_MESSAGE);
        else if(model.findPassenger(Integer.parseInt(passenger_idString)) == false)
            JOptionPane.showMessageDialog(this, "Passenger does not exist", "Try again", JOptionPane.ERROR_MESSAGE);
        else {
            try {
                model.updatePLastName(Integer.parseInt(passenger_idString), last_name);
                JOptionPane.showMessageDialog(this, "Passenger last_name updated");
            }
            catch(Exception e){
                JOptionPane.showMessageDialog(this, "Error updating Passenger last_name", "Try again", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_viewBookings4ActionPerformed

    private void uFirstNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uFirstNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_uFirstNameActionPerformed

    private void viewBookings5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewBookings5ActionPerformed
        String passenger_idString = uPassengerID.getText();
        String first_name = uFirstName.getText();

        if(passenger_idString.isEmpty() || first_name.isEmpty())
            JOptionPane.showMessageDialog(this, "Please enter required fields", "Try again", JOptionPane.ERROR_MESSAGE);
        else if(model.findPassenger(Integer.parseInt(passenger_idString)) == false)
            JOptionPane.showMessageDialog(this, "Passenger does not exist", "Try again", JOptionPane.ERROR_MESSAGE);
        else {
            try {
                model.updatePFirstName(Integer.parseInt(passenger_idString), first_name);
                JOptionPane.showMessageDialog(this, "Passenger first_name updated");
            }
            catch(Exception e){
                JOptionPane.showMessageDialog(this, "Error updating Passenger first_name", "Try again", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_viewBookings5ActionPerformed

    private void uPassengerIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uPassengerIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_uPassengerIDActionPerformed

    private void uBirthdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uBirthdateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_uBirthdateActionPerformed

    private void viewBookings6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewBookings6ActionPerformed
        String passenger_idString = uPassengerID.getText();
        String birthdate = uBirthdate.getText();

        if(passenger_idString.isEmpty() || birthdate.isEmpty())
            JOptionPane.showMessageDialog(this, "Please enter required fields", "Try again", JOptionPane.ERROR_MESSAGE);
        else if(model.findPassenger(Integer.parseInt(passenger_idString)) == false)
            JOptionPane.showMessageDialog(this, "Passenger does not exist", "Try again", JOptionPane.ERROR_MESSAGE);
        else {
            try {
                model.updateBirthdate(Integer.parseInt(passenger_idString), birthdate);
                JOptionPane.showMessageDialog(this, "Passenger birthdate updated");
            }
            catch(Exception e){
                JOptionPane.showMessageDialog(this, "Error updating Passenger birthdate", "Try again", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_viewBookings6ActionPerformed

    private void uContactNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uContactNoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_uContactNoActionPerformed

    private void viewBookings7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewBookings7ActionPerformed
        String passenger_idString = uPassengerID.getText();
        String contact_noString = uContactNo.getText();

        if(passenger_idString.isEmpty() || contact_noString.isEmpty())
            JOptionPane.showMessageDialog(this, "Please enter required fields", "Try again", JOptionPane.ERROR_MESSAGE);
        else if(!model.findPassenger(Integer.parseInt(passenger_idString)))
            JOptionPane.showMessageDialog(this, "Passenger does not exist", "Try again", JOptionPane.ERROR_MESSAGE);
        else {
            try {
                model.updateContactNo(Integer.parseInt(passenger_idString), Long.parseLong(contact_noString));
                JOptionPane.showMessageDialog(this, "Passenger contact_no updated");
            }
            catch(Exception e){
                JOptionPane.showMessageDialog(this, "Error updating Passenger contact_no", "Try again", JOptionPane.ERROR_MESSAGE);
                System.out.println(e.getMessage());
            }
        }
    }//GEN-LAST:event_viewBookings7ActionPerformed

    private void uEmailAddressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uEmailAddressActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_uEmailAddressActionPerformed

    private void viewBookings8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewBookings8ActionPerformed
        String passenger_idString = uPassengerID.getText();
        String email = uEmailAddress.getText();

        if(passenger_idString.isEmpty() || email.isEmpty())
            JOptionPane.showMessageDialog(this, "Please enter required fields", "Try again", JOptionPane.ERROR_MESSAGE);
        else if(model.findPassenger(Integer.parseInt(passenger_idString)) == false)
            JOptionPane.showMessageDialog(this, "Passenger does not exist", "Try again", JOptionPane.ERROR_MESSAGE);
        else {
            try {
                model.updateEmail(Integer.parseInt(passenger_idString), email);
                JOptionPane.showMessageDialog(this, "Passenger email updated");
            }
            catch(Exception e){
                JOptionPane.showMessageDialog(this, "Error updating Passenger email", "Try again", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_viewBookings8ActionPerformed

    private void viewBookings9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewBookings9ActionPerformed
        String passenger_idString = uPassengerID.getText();
        String vip_status = uVIPStatus.getSelectedItem().toString();

        if(passenger_idString.isEmpty() || vip_status.isEmpty())
            JOptionPane.showMessageDialog(this, "Please enter required fields", "Try again", JOptionPane.ERROR_MESSAGE);
        else if(model.findPassenger(Integer.parseInt(passenger_idString)) == false)
            JOptionPane.showMessageDialog(this, "Passenger does not exist", "Try again", JOptionPane.ERROR_MESSAGE);
        else {
            try {
                model.updateStatus(Integer.parseInt(passenger_idString), vip_status);
                JOptionPane.showMessageDialog(this, "Passenger vip_status updated");
            }
            catch(Exception e){
                JOptionPane.showMessageDialog(this, "Error updating Passenger vip_status", "Try again", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_viewBookings9ActionPerformed

    //**********************************************************************************
    //**********************************************************************************
    private void createEmployeeButtonActionPerformed(java.awt.event.ActionEvent evt) {
        String job_title = cJobTitle.getText();
        String last_name = cEmpLastName.getText();
        String first_name = cEmpFirstName.getText();
        String hire_date = cHireDate.getText();
        String salaryString = cSalary.getText();
        String department = cDepartment.getText();

        if (job_title.isEmpty() || last_name.isEmpty() || first_name.isEmpty() || hire_date.isEmpty() || salaryString.isEmpty() || department.isEmpty())
            JOptionPane.showMessageDialog(this, "Please enter all fields", "Try again", JOptionPane.ERROR_MESSAGE);
        else{
            float salary = Float.parseFloat(cSalary.getText());
            try {
                String insertEmployee = "INSERT INTO employees (last_name, first_name, job_title, salary, hire_date,department) VALUES (?, ?, ?, ?, ?, ?)";
                PreparedStatement stmt = con.prepareStatement(insertEmployee);


                stmt.setString(1, last_name);
                stmt.setString(2, first_name);
                stmt.setString(3, job_title);
                stmt.setDouble(4, salary);
                stmt.setString(5, hire_date);
                stmt.setString(6, department);

                stmt.executeUpdate();

                if( employees.isEmpty()){
                    Employee newEmployee = new Employee(100000, last_name, first_name, job_title, hire_date, salary, department);
                    employees.add(newEmployee);
                }
                else{
                    Employee newEmployee = new Employee(employees.get(employees.size() - 1).getID() + 1, last_name, first_name, job_title, hire_date, salary, department);
                    employees.add(newEmployee);
                    JOptionPane.showMessageDialog(this, "Employee created");
                }
            }catch(SQLException e){
                System.out.println("Database connection failed:" + e.getMessage());
                JOptionPane.showMessageDialog(this, "Error creating employee", "Try again", JOptionPane.ERROR_MESSAGE);
            }
        }



    }//GEN-LAST:event_createEmployeeButtonActionPerformed

    private void cEmpLastNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cEmpLastNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cEmpLastNameActionPerformed

    private void cEmpFirstNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cEmpFirstNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cEmpFirstNameActionPerformed

    private void cHireDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cHireDateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cHireDateActionPerformed

    private void cSalaryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cSalaryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cSalaryActionPerformed

    private void dEmployeeIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dEmployeeIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dEmployeeIDActionPerformed

    private void deleteEmployeeButtonActionPerformed(java.awt.event.ActionEvent evt) {
        // Retrieve the employee ID from the text field
        String employeeIDString = dEmployeeID.getText();

        // Validate that the field is not empty
        if (employeeIDString.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter the employee ID.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Parse the employee ID and handle invalid input
        int employeeID;
        try {
            employeeID = Integer.parseInt(employeeIDString);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Invalid employee ID. Please enter a valid number.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        // Connect to the database
        try {
            System.out.println("Database connection successful.");

            // Check if the employee exists
            Model model = new Model(con);
            if (!model.findEmployee(employeeID)) {
                JOptionPane.showMessageDialog(this, "Employee does not exist.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Prepare and execute the SQL DELETE statement
            String deleteEmployeeQuery = "DELETE FROM employees WHERE employee_id = ?";
            try (PreparedStatement stmt = con.prepareStatement(deleteEmployeeQuery)) {
                stmt.setInt(1, employeeID);

                int rowsAffected = stmt.executeUpdate();

                for(int i = 0; i < employees.size(); i++) {
                    if(employees.get(i).getID() == employeeID)
                        employees.remove(i);
                }
                // Confirm deletion
                if (rowsAffected > 0) {
                    JOptionPane.showMessageDialog(this, "Employee deleted successfully!");
                } else {
                    JOptionPane.showMessageDialog(this, "Error: Employee could not be deleted.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Error while deleting employee: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }

        } catch (Exception e) {
            System.out.println("Database connection failed: " + e.getMessage());
            JOptionPane.showMessageDialog(this, "Failed to connect to the database. Please check your connection settings.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void cDepartmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cDepartmentActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cDepartmentActionPerformed

    private void uJobTitleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uJobTitleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_uJobTitleActionPerformed

    private void updateJobTitleButtonActionPerformed(java.awt.event.ActionEvent evt) {

        String employeeIDString = uEmployeeID.getText();
        String job_title = uJobTitle.getText();


        if (employeeIDString.isEmpty() || job_title.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter all required fields.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }


        int employeeID;
        try {
            employeeID = Integer.parseInt(employeeIDString);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Invalid Employee ID. Please enter a valid number.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            if (!model.findEmployee(employeeID)) {
                JOptionPane.showMessageDialog(this, "Employee does not exist.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }


            try {
                model.updateJobTitle(employeeID, job_title);
                JOptionPane.showMessageDialog(this, "Employee job title updated successfully!");
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Error while updating job title: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Unexpected error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }

        } catch (Exception e) {
            System.out.println("Database connection failed: " + e.getMessage());
            JOptionPane.showMessageDialog(this, "Failed to connect to the database. Please check your connection settings.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void uEmpLastNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uEmpLastNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_uEmpLastNameActionPerformed

    private void viewBookings11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewBookings11ActionPerformed
        String employeeIDString = uEmployeeID.getText();
        String last_name = uEmpLastName.getText();

        System.out.println(last_name + " and " + employeeIDString);

        if(employeeIDString.isEmpty() || last_name.isEmpty())
            JOptionPane.showMessageDialog(this, "Please enter required fields", "Try again", JOptionPane.ERROR_MESSAGE);
        else if(!model.findEmployee(Integer.parseInt(employeeIDString)))
            JOptionPane.showMessageDialog(this, "Employee does not exist", "Try again", JOptionPane.ERROR_MESSAGE);
        else {
            try {
                model.updateELastName(Integer.parseInt(employeeIDString), last_name);
                JOptionPane.showMessageDialog(this, "Employee last_name updated");
            }
            catch(Exception e){
                JOptionPane.showMessageDialog(this, "Error updating employee last_name", "Try again", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_viewBookings11ActionPerformed

    private void uEmpFirstNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uEmpFirstNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_uEmpFirstNameActionPerformed

    private void viewBookings12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewBookings12ActionPerformed
        String employeeIDString = uEmployeeID.getText();
        String first_name = uEmpFirstName.getText();

        if(employeeIDString.isEmpty() || first_name.isEmpty())
            JOptionPane.showMessageDialog(this, "Please enter required fields", "Try again", JOptionPane.ERROR_MESSAGE);
        else if(model.findEmployee(Integer.parseInt(employeeIDString)) == false)
            JOptionPane.showMessageDialog(this, "Employee does not exist", "Try again", JOptionPane.ERROR_MESSAGE);
        else {
            try {
                model.updateEFirstName(Integer.parseInt(employeeIDString), first_name);
                JOptionPane.showMessageDialog(this, "Employee first_name updated");
            }
            catch(Exception e){
                JOptionPane.showMessageDialog(this, "Error updating employee first_name", "Try again", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_viewBookings12ActionPerformed

    private void uEmployeeIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uEmployeeIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_uEmployeeIDActionPerformed

    private void uHireDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uHireDateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_uHireDateActionPerformed

    private void viewBookings13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewBookings13ActionPerformed
        String employeeIDString = uEmployeeID.getText();
        String hire_date = uHireDate.getText();

        if(employeeIDString.isEmpty() || hire_date.isEmpty())
            JOptionPane.showMessageDialog(this, "Please enter required fields", "Try again", JOptionPane.ERROR_MESSAGE);
        else if(model.findEmployee(Integer.parseInt(employeeIDString)) == false)
            JOptionPane.showMessageDialog(this, "Employee does not exist", "Try again", JOptionPane.ERROR_MESSAGE);
        else {
            try {
                model.updateHireDate(Integer.parseInt(employeeIDString), hire_date);
                JOptionPane.showMessageDialog(this, "Employee hire_date updated");
            }
            catch(Exception e){
                JOptionPane.showMessageDialog(this, "Error updating employee hire_date", "Try again", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_viewBookings13ActionPerformed

    private void uSalaryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uSalaryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_uSalaryActionPerformed

    private void viewBookings14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewBookings14ActionPerformed
        String employeeIDString = uEmployeeID.getText();
        String salaryString = uSalary.getText();

        if(employeeIDString.isEmpty() || salaryString.isEmpty())
            JOptionPane.showMessageDialog(this, "Please enter required fields", "Try again", JOptionPane.ERROR_MESSAGE);
        else if(model.findEmployee(Integer.parseInt(employeeIDString)) == false)
            JOptionPane.showMessageDialog(this, "Employee does not exist", "Try again", JOptionPane.ERROR_MESSAGE);
        else {
            try {
                model.updateSalary(Integer.parseInt(employeeIDString), Float.parseFloat(salaryString));
                JOptionPane.showMessageDialog(this, "Employee salary updated");
            }
            catch(Exception e){
                JOptionPane.showMessageDialog(this, "Error updating employee salary", "Try again", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_viewBookings14ActionPerformed

    private void uDepartmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uDepartmentActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_uDepartmentActionPerformed

    private void viewBookings15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewBookings15ActionPerformed
        String employeeIDString = uEmployeeID.getText();
        String department = uDepartment.getText();

        if(employeeIDString.isEmpty() || department.isEmpty())
            JOptionPane.showMessageDialog(this, "Please enter required fields", "Try again", JOptionPane.ERROR_MESSAGE);
        else if(model.findEmployee(Integer.parseInt(employeeIDString)) == false)
            JOptionPane.showMessageDialog(this, "Employee does not exist", "Try again", JOptionPane.ERROR_MESSAGE);
        else {
            try {
                model.updateDepartment(Integer.parseInt(employeeIDString), department);
                JOptionPane.showMessageDialog(this, "Employee department updated");
            }
            catch(Exception e){
                JOptionPane.showMessageDialog(this, "Error updating employee department", "Try again", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_viewBookings15ActionPerformed

    private void createPassengerButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createPassengerButton2ActionPerformed
        String gate_numberString = cGateNumber.getText();
        String destination = cDestination.getText();
        String origin = cOrigin.getText();
        String departure = cDeparture.getText();
        String arrival = cArrival.getText();
        String pilot_idString = cPilotID.getText();
        String copilot_idString = cCopilotID.getText();
        String lead_attendant_idString = cLeadAttendantID.getText();
        String flight_attendant_idString = cFlightAttendantID.getText();
        String basePriceString = cBasePrice.getText();


        if (gate_numberString.isEmpty() || destination.isEmpty() || origin.isEmpty() || departure.isEmpty() || arrival.isEmpty() ||
                pilot_idString.isEmpty() || copilot_idString.isEmpty() || lead_attendant_idString.isEmpty() || flight_attendant_idString.isEmpty() || basePriceString.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter all fields", "Try again", JOptionPane.ERROR_MESSAGE);
            return;
        }


        if (!model.findEmployee(Integer.parseInt(pilot_idString))) {
            JOptionPane.showMessageDialog(this, "Pilot does not exist", "Try again", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (!model.findEmployee(Integer.parseInt(copilot_idString))) {
            JOptionPane.showMessageDialog(this, "Copilot does not exist", "Try again", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (!model.findEmployee(Integer.parseInt(lead_attendant_idString))) {
            JOptionPane.showMessageDialog(this, "Lead attendant does not exist", "Try again", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (!model.findEmployee(Integer.parseInt(flight_attendant_idString))) {
            JOptionPane.showMessageDialog(this, "Flight attendant does not exist", "Try again", JOptionPane.ERROR_MESSAGE);
            return;
        }


        double basePrice;
        try {
            basePrice = Double.parseDouble(basePriceString);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Invalid base price. Please enter a valid number.", "Try again", JOptionPane.ERROR_MESSAGE);
            return;
        }


        try  {
            String insertFlight = "INSERT INTO flights (gate_number, destination, origin, departure, arrival, pilot_id, copilot_id, lead_attendant, flight_attendant) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)";
            try (PreparedStatement stmt = con.prepareStatement(insertFlight)) {
                stmt.setInt(1, Integer.parseInt(gate_numberString));
                stmt.setString(2, destination);
                stmt.setString(3, origin);
                stmt.setString(4, departure);
                stmt.setString(5, arrival);
                stmt.setInt(6, Integer.parseInt(pilot_idString));
                stmt.setInt(7, Integer.parseInt(copilot_idString));
                stmt.setInt(8, Integer.parseInt(lead_attendant_idString));
                stmt.setInt(9, Integer.parseInt(flight_attendant_idString));

                stmt.executeUpdate();
                JOptionPane.showMessageDialog(this, "Flight created successfully.");
            }
        } catch (SQLException e) {
            System.out.println("Database connection failed: " + e.getMessage());
            JOptionPane.showMessageDialog(this, "Error creating flight: " + e.getMessage(), "Try again", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_createPassengerButton2ActionPerformed

    private void cGateNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cGateNumberActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cGateNumberActionPerformed

    private void cDestinationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cDestinationActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cDestinationActionPerformed

    private void cOriginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cOriginActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cOriginActionPerformed

    private void cDepartureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cDepartureActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cDepartureActionPerformed

    private void cArrivalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cArrivalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cArrivalActionPerformed

    private void dFlightIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dFlightIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dFlightIDActionPerformed

    private void deletePassengerButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletePassengerButton2ActionPerformed
        String flight_idString = dFlightID.getText();

        if (flight_idString.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter required field", "Try again", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (!model.findFlight(Integer.parseInt(flight_idString))) {
            JOptionPane.showMessageDialog(this, "Flight does not exist", "Try again", JOptionPane.ERROR_MESSAGE);
            return;
        }


        try {
            String deleteFlight = "DELETE FROM flights WHERE flight_id = ?";
            try (PreparedStatement stmt = con.prepareStatement(deleteFlight)) {
                stmt.setInt(1, Integer.parseInt(flight_idString));


                stmt.executeUpdate();
                JOptionPane.showMessageDialog(this, "Flight deleted successfully.");
            }
        } catch (SQLException e) {
            System.out.println("Database connection failed: " + e.getMessage());
            JOptionPane.showMessageDialog(this, "Error deleting flight: " + e.getMessage(), "Try again", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_deletePassengerButton2ActionPerformed

    private void cBasePriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cBasePriceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cBasePriceActionPerformed

    private void uGateNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uGateNumberActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_uGateNumberActionPerformed

    private void viewBookings17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewBookings17ActionPerformed
        String flight_idString = uFlightID.getText();
        String gate_numberString = uGateNumber.getText();

        if(flight_idString.isEmpty() || gate_numberString.isEmpty())
            JOptionPane.showMessageDialog(this, "Please enter required fields", "Try again", JOptionPane.ERROR_MESSAGE);
        else if(!model.findFlight(Integer.parseInt(flight_idString)))
            JOptionPane.showMessageDialog(this, "Flight does not exist", "Try again", JOptionPane.ERROR_MESSAGE);
        else {
            try {
                model.updateGateNumber(Integer.parseInt(flight_idString), Integer.parseInt(gate_numberString));
                JOptionPane.showMessageDialog(this, "Flight gate number updated");
            }
            catch(Exception e){
                JOptionPane.showMessageDialog(this, "Error updating Flight gate number", "Try again", JOptionPane.ERROR_MESSAGE);
                System.out.println(e.getMessage());
            }
        }
    }//GEN-LAST:event_viewBookings17ActionPerformed

    private void uDestinationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uDestinationActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_uDestinationActionPerformed

    private void viewBookings18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewBookings18ActionPerformed
        String flight_idString = uFlightID.getText();
        String destination = uDestination.getText();

        if(flight_idString.isEmpty() || destination.isEmpty())
            JOptionPane.showMessageDialog(this, "Please enter required fields", "Try again", JOptionPane.ERROR_MESSAGE);
        else if(model.findFlight(Integer.parseInt(flight_idString)) == false)
            JOptionPane.showMessageDialog(this, "Flight does not exist", "Try again", JOptionPane.ERROR_MESSAGE);
        else {
            try {
                model.updateDesination(Integer.parseInt(flight_idString), destination);
                JOptionPane.showMessageDialog(this, "Flight destination updated");
            }
            catch(Exception e){
                JOptionPane.showMessageDialog(this, "Error updating Flight destination", "Try again", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_viewBookings18ActionPerformed

    private void uOriginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uOriginActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_uOriginActionPerformed

    private void viewBookings19ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewBookings19ActionPerformed
        String flight_idString = uFlightID.getText();
        String origin = uOrigin.getText();

        if(flight_idString.isEmpty() || origin.isEmpty())
            JOptionPane.showMessageDialog(this, "Please enter required fields", "Try again", JOptionPane.ERROR_MESSAGE);
        else if(model.findFlight(Integer.parseInt(flight_idString)) == false)
            JOptionPane.showMessageDialog(this, "Flight does not exist", "Try again", JOptionPane.ERROR_MESSAGE);
        else {
            try {
                model.updateOrigin(Integer.parseInt(flight_idString), origin);
                JOptionPane.showMessageDialog(this, "Flight origin updated");
            }
            catch(Exception e){
                JOptionPane.showMessageDialog(this, "Error updating Flight origin", "Try again", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_viewBookings19ActionPerformed

    private void uFlightIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uFlightIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_uFlightIDActionPerformed

    private void uDepartureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uDepartureActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_uDepartureActionPerformed

    private void viewBookings20ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewBookings20ActionPerformed
        String flight_idString = uFlightID.getText();
        String departure = uDeparture.getText();

        if(flight_idString.isEmpty() || departure.isEmpty())
            JOptionPane.showMessageDialog(this, "Please enter required fields", "Try again", JOptionPane.ERROR_MESSAGE);
        else if(!model.findFlight(Integer.parseInt(flight_idString)))
            JOptionPane.showMessageDialog(this, "Flight does not exist", "Try again", JOptionPane.ERROR_MESSAGE);
        else {
            try {
                model.updateDeparture(Integer.parseInt(flight_idString), departure);
                JOptionPane.showMessageDialog(this, "Flight departure updated");
            }
            catch(Exception e){
                JOptionPane.showMessageDialog(this, "Error updating Flight departure", "Try again", JOptionPane.ERROR_MESSAGE);
                System.out.println(e.getMessage());
            }
        }
    }//GEN-LAST:event_viewBookings20ActionPerformed

    private void uArrivalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uArrivalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_uArrivalActionPerformed

    private void viewBookings21ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewBookings21ActionPerformed
        String flight_idString = uFlightID.getText();
        String arrival = uArrival.getText();

        if(flight_idString.isEmpty() || arrival.isEmpty())
            JOptionPane.showMessageDialog(this, "Please enter required fields", "Try again", JOptionPane.ERROR_MESSAGE);
        else if(!model.findFlight(Integer.parseInt(flight_idString)))
            JOptionPane.showMessageDialog(this, "Flight does not exist", "Try again", JOptionPane.ERROR_MESSAGE);
        else {
            try {
                model.updateArrival(Integer.parseInt(flight_idString), arrival);
                JOptionPane.showMessageDialog(this, "Flight arrival updated");
            }
            catch(Exception e){
                JOptionPane.showMessageDialog(this, "Error updating Flight arrival", "Try again", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_viewBookings21ActionPerformed

    private void uFlightAttendantIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uFlightAttendantIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_uFlightAttendantIDActionPerformed

    private void viewBookings22ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewBookings22ActionPerformed
        String flight_idString = uFlightID.getText();
        String pilot_idString = uPilotID.getText();

        if(flight_idString.isEmpty() || pilot_idString.isEmpty())
            JOptionPane.showMessageDialog(this, "Please enter required fields", "Try again", JOptionPane.ERROR_MESSAGE);
        else if(model.findFlight(Integer.parseInt(flight_idString)) == false)
            JOptionPane.showMessageDialog(this, "Flight does not exist", "Try again", JOptionPane.ERROR_MESSAGE);
        else if(model.findEmployee(Integer.parseInt(pilot_idString)) == false)
            JOptionPane.showMessageDialog(this, "Pilot does not exist", "Try again", JOptionPane.ERROR_MESSAGE);
        else {
            try {
                model.updatePilot(Integer.parseInt(flight_idString), Integer.parseInt(pilot_idString));
                JOptionPane.showMessageDialog(this, "Flight pilot updated");
            }
            catch(Exception e){
                JOptionPane.showMessageDialog(this, "Error updating Flight pilot", "Try again", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_viewBookings22ActionPerformed

    private void viewBookings23ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewBookings23ActionPerformed
        String flight_idString = uFlightID.getText();
        String flight_attendant_idString = uFlightAttendantID.getText();

        if(flight_idString.isEmpty() || flight_attendant_idString.isEmpty())
            JOptionPane.showMessageDialog(this, "Please enter required fields", "Try again", JOptionPane.ERROR_MESSAGE);
        else if(model.findFlight(Integer.parseInt(flight_idString)) == false)
            JOptionPane.showMessageDialog(this, "Flight does not exist", "Try again", JOptionPane.ERROR_MESSAGE);
        else if(model.findEmployee(Integer.parseInt(flight_attendant_idString)) == false)
            JOptionPane.showMessageDialog(this, "Flight attendant does not exist", "Try again", JOptionPane.ERROR_MESSAGE);
        else {
            try {
                model.updateFlightAttendant(Integer.parseInt(flight_idString), Integer.parseInt(flight_attendant_idString));
                JOptionPane.showMessageDialog(this, "Flight Flight attendant updated");
            }
            catch(Exception e){
                JOptionPane.showMessageDialog(this, "Error updating Flight Flight attendant", "Try again", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_viewBookings23ActionPerformed

    private void createPassengerButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createPassengerButton3ActionPerformed
        String passenger_idString = cBPassengerID.getText();
        String flight_idString = cBFlightID.getText();
        String check_in_date = cCheckInDate.getText();
        String seat_no = cSeatNo.getText();
        String seat_class = cSeatClass.getSelectedItem().toString();
        String total_bags = cBagTotal.getText();
        String food = cFood.getSelectedItem().toString();

        // Validate input fields
        if (passenger_idString.isEmpty() || flight_idString.isEmpty() || check_in_date.isEmpty() || seat_no.isEmpty() || seat_class.isEmpty() || total_bags.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter all fields", "Try again", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Validate if passenger and flight exist
        if (!model.findPassenger(Integer.parseInt(passenger_idString))) {
            JOptionPane.showMessageDialog(this, "Passenger does not exist", "Try again", JOptionPane.ERROR_MESSAGE);
            return;
        } else if (!model.findFlight(Integer.parseInt(flight_idString))) {
            JOptionPane.showMessageDialog(this, "Flight does not exist", "Try again", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // SQL Logic to Insert Booking into the Database
        try  {
            String insertBooking = "INSERT INTO bookings (passenger_id, flight_id, checkin_date, seat_no, seat_class, total_cost, food_order, total_checkin_bags) VALUES (?, ?, ?, ?, ?, ?, ?, ?)";

            try (PreparedStatement stmt = con.prepareStatement(insertBooking)) {
                // Set values to the prepared statement
                stmt.setInt(1, Integer.parseInt(passenger_idString));
                stmt.setInt(2, Integer.parseInt(flight_idString));
                stmt.setString(3, check_in_date);
                stmt.setString(4, seat_no);
                stmt.setString(5, seat_class);
                stmt.setDouble(6, model.getTotalPrice(Integer.parseInt(flight_idString), seat_no));  // Assume model.getTotalPrice() calculates the total price
                stmt.setString(7, food);
                stmt.setInt(8, Integer.parseInt(total_bags));

                // Execute the insert operation
                stmt.executeUpdate();
                JOptionPane.showMessageDialog(this, "Booking created successfully.");
            }
        } catch (SQLException e) {
            System.out.println("Database connection failed: " + e.getMessage());
            JOptionPane.showMessageDialog(this, "Error creating booking: " + e.getMessage(), "Try again", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_createPassengerButton3ActionPerformed


    private void cBPassengerIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cBPassengerIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cBPassengerIDActionPerformed

    private void cBFlightIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cBFlightIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cBFlightIDActionPerformed

    private void cCheckInDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cCheckInDateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cCheckInDateActionPerformed

    private void cSeatNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cSeatNoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cSeatNoActionPerformed

    private void dBookingIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dBookingIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dBookingIDActionPerformed

    private void deletePassengerButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletePassengerButton3ActionPerformed
        String booking_idString = dBookingID.getText();

        if (booking_idString.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter required field", "Try again", JOptionPane.ERROR_MESSAGE);
            return;
        } else if (!model.findBooking(Integer.parseInt(booking_idString))) {
            JOptionPane.showMessageDialog(this, "Booking does not exist", "Try again", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            String deleteBookingSQL = "DELETE FROM bookings WHERE booking_id = ?";

            try (PreparedStatement stmt = con.prepareStatement(deleteBookingSQL)) {

                stmt.setInt(1, Integer.parseInt(booking_idString));


                int rowsAffected = stmt.executeUpdate();

                if (rowsAffected > 0) {
                    JOptionPane.showMessageDialog(this, "Booking deleted successfully.");
                } else {
                    JOptionPane.showMessageDialog(this, "Error deleting booking: No such booking found.", "Try again", JOptionPane.ERROR_MESSAGE);
                }
            }
        } catch (SQLException e) {
            System.out.println("Database connection failed: " + e.getMessage());
            JOptionPane.showMessageDialog(this, "Error deleting Booking: " + e.getMessage(), "Try again", JOptionPane.ERROR_MESSAGE);
        }
    }


    private void cBagTotalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cBagTotalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cBagTotalActionPerformed

    private void uBPassengerIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uBPassengerIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_uBPassengerIDActionPerformed

    private void viewBookings24ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewBookings24ActionPerformed
        String booking_id = uBookingID.getText();
        String passenger_id = uBPassengerID.getText();

        if(booking_id.isEmpty() || passenger_id.isEmpty())
            JOptionPane.showMessageDialog(this, "Please enter required fields", "Try again", JOptionPane.ERROR_MESSAGE);
        else if(model.findBooking(Integer.parseInt(booking_id)) == false)
            JOptionPane.showMessageDialog(this, "Booking does not exist", "Try again", JOptionPane.ERROR_MESSAGE);
        else if(model.findPassenger(Integer.parseInt(passenger_id)) == false)
            JOptionPane.showMessageDialog(this, "Passenger does not exist", "Try again", JOptionPane.ERROR_MESSAGE);
        else {
            try {
                model.updatePassenger(Integer.parseInt(booking_id), Integer.parseInt(passenger_id));
                JOptionPane.showMessageDialog(this, "Booking Passenger updated");
            }
            catch(Exception e){
                JOptionPane.showMessageDialog(this, "Error updating Booking Passenger", "Try again", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_viewBookings24ActionPerformed

    private void uBFlightIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uBFlightIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_uBFlightIDActionPerformed

    private void viewBookings25ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewBookings25ActionPerformed
        String booking_id = uBookingID.getText();
        String flight_id = uBFlightID.getText();

        if(booking_id.isEmpty() || flight_id.isEmpty())
            JOptionPane.showMessageDialog(this, "Please enter required fields", "Try again", JOptionPane.ERROR_MESSAGE);
        else if(!model.findBooking(Integer.parseInt(booking_id)))
            JOptionPane.showMessageDialog(this, "Booking does not exist", "Try again", JOptionPane.ERROR_MESSAGE);
        else if(!model.findFlight(Integer.parseInt(flight_id)))
            JOptionPane.showMessageDialog(this, "Flight does not exist", "Try again", JOptionPane.ERROR_MESSAGE);
        else {
            try {
                model.updateFlight(Integer.parseInt(booking_id), Integer.parseInt(flight_id));
                JOptionPane.showMessageDialog(this, "Booking Flight updated");
            }
            catch(Exception e){
                JOptionPane.showMessageDialog(this, "Error updating Booking Flight", "Try again", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_viewBookings25ActionPerformed

    private void uCheckInDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uCheckInDateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_uCheckInDateActionPerformed

    private void viewBookings26ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewBookings26ActionPerformed
        String booking_id = uBookingID.getText();
        String check_in_date = uCheckInDate.getText();

        if(booking_id.isEmpty() || check_in_date.isEmpty())
            JOptionPane.showMessageDialog(this, "Please enter required fields", "Try again", JOptionPane.ERROR_MESSAGE);
        else if(model.findBooking(Integer.parseInt(booking_id)) == false)
            JOptionPane.showMessageDialog(this, "Booking does not exist", "Try again", JOptionPane.ERROR_MESSAGE);
        else {
            try {
                model.updateCheckIn(Integer.parseInt(booking_id), check_in_date);
                JOptionPane.showMessageDialog(this, "Booking check_in_date updated");
            }
            catch(Exception e){
                JOptionPane.showMessageDialog(this, "Error updating Booking check_in_date", "Try again", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_viewBookings26ActionPerformed

    private void uBookingIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uBookingIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_uBookingIDActionPerformed

    private void uSeatNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uSeatNoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_uSeatNoActionPerformed

    private void viewBookings27ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewBookings27ActionPerformed
        String booking_id = uBookingID.getText();
        String seat_no = uSeatNo.getText();

        if(booking_id.isEmpty() || seat_no.isEmpty())
            JOptionPane.showMessageDialog(this, "Please enter required fields", "Try again", JOptionPane.ERROR_MESSAGE);
        else if(!model.findBooking(Integer.parseInt(booking_id)))
            JOptionPane.showMessageDialog(this, "Booking does not exist", "Try again", JOptionPane.ERROR_MESSAGE);
        else {
            try {
                model.updateSeat(Integer.parseInt(booking_id), seat_no);
                JOptionPane.showMessageDialog(this, "Booking seat_no updated");
            }
            catch(Exception e){
                JOptionPane.showMessageDialog(this, "Error updating Booking seat_no", "Try again", JOptionPane.ERROR_MESSAGE);
                System.out.println(e.getMessage());
            }
        }
    }//GEN-LAST:event_viewBookings27ActionPerformed

    private void viewBookings28ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewBookings28ActionPerformed
        String booking_id = uBookingID.getText();
        String seat_class = uSeatClass.getSelectedItem().toString();

        if(booking_id.isEmpty())
            JOptionPane.showMessageDialog(this, "Please enter required fields", "Try again", JOptionPane.ERROR_MESSAGE);
        else if(model.findBooking(Integer.parseInt(booking_id)) == false)
            JOptionPane.showMessageDialog(this, "Booking does not exist", "Try again", JOptionPane.ERROR_MESSAGE);
        else {
            try {
                model.updateClass(Integer.parseInt(booking_id), seat_class);
                JOptionPane.showMessageDialog(this, "Booking seat_class updated");
            }
            catch(Exception e){
                JOptionPane.showMessageDialog(this, "Error updating Booking seat_class", "Try again", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_viewBookings28ActionPerformed

    private void uBagTotalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uBagTotalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_uBagTotalActionPerformed

    private void viewBookings29ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewBookings29ActionPerformed
        String booking_id = uBookingID.getText();
        String food = uFood.getSelectedItem().toString();

        if(booking_id.isEmpty())
            JOptionPane.showMessageDialog(this, "Please enter required fields", "Try again", JOptionPane.ERROR_MESSAGE);
        else if(model.findBooking(Integer.parseInt(booking_id)) == false)
            JOptionPane.showMessageDialog(this, "Booking does not exist", "Try again", JOptionPane.ERROR_MESSAGE);
        else {
            try {
                model.updateFoodOrder(Integer.parseInt(booking_id), food);
                JOptionPane.showMessageDialog(this, "Booking food order updated");
            }
            catch(Exception e){
                JOptionPane.showMessageDialog(this, "Error updating Booking food order", "Try again", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_viewBookings29ActionPerformed

    private void viewBookings30ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewBookings30ActionPerformed
        String booking_id = uBookingID.getText();
        String num_bag = uBagTotal.getText();

        if(booking_id.isEmpty() || num_bag.isEmpty())
            JOptionPane.showMessageDialog(this, "Please enter required fields", "Try again", JOptionPane.ERROR_MESSAGE);
        else if(model.findBooking(Integer.parseInt(booking_id)) == false)
            JOptionPane.showMessageDialog(this, "Booking does not exist", "Try again", JOptionPane.ERROR_MESSAGE);
        else {
            try {
                model.updateTotalBaggage(Integer.parseInt(booking_id), Integer.parseInt(num_bag));
                JOptionPane.showMessageDialog(this, "Booking total baggage updated");
            }
            catch(Exception e){
                JOptionPane.showMessageDialog(this, "Error updating Booking total baggage", "Try again", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_viewBookings30ActionPerformed

    private void cJobTitleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cJobTitleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cJobTitleActionPerformed

    private void cPilotIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cPilotIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cPilotIDActionPerformed

    private void cCopilotIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cCopilotIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cCopilotIDActionPerformed

    private void cLeadAttendantIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cLeadAttendantIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cLeadAttendantIDActionPerformed

    private void uPilotIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uPilotIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_uPilotIDActionPerformed

    private void uCopilotIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uCopilotIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_uCopilotIDActionPerformed

    private void viewBookings31ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewBookings31ActionPerformed
        String flight_idString = uFlightID.getText();
        String copilot_idString = uCopilotID.getText();

        if(flight_idString.isEmpty() || copilot_idString.isEmpty())
            JOptionPane.showMessageDialog(this, "Please enter required fields", "Try again", JOptionPane.ERROR_MESSAGE);
        else if(model.findFlight(Integer.parseInt(flight_idString)) == false)
            JOptionPane.showMessageDialog(this, "Flight does not exist", "Try again", JOptionPane.ERROR_MESSAGE);
        else if(model.findEmployee(Integer.parseInt(copilot_idString)) == false)
            JOptionPane.showMessageDialog(this, "Copilot does not exist", "Try again", JOptionPane.ERROR_MESSAGE);
        else {
            try {
                model.updateCoPilot(Integer.parseInt(flight_idString), Integer.parseInt(copilot_idString));
                JOptionPane.showMessageDialog(this, "Flight Copilot updated");
            }
            catch(Exception e){
                JOptionPane.showMessageDialog(this, "Error updating Flight Copilot", "Try again", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_viewBookings31ActionPerformed

    private void uLeadAttendantIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uLeadAttendantIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_uLeadAttendantIDActionPerformed

    private void viewBookings32ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewBookings32ActionPerformed
        String flight_idString = uFlightID.getText();
        String lead_attendant_idString = uLeadAttendantID.getText();

        if(flight_idString.isEmpty() || lead_attendant_idString.isEmpty())
            JOptionPane.showMessageDialog(this, "Please enter required fields", "Try again", JOptionPane.ERROR_MESSAGE);
        else if(model.findFlight(Integer.parseInt(flight_idString)) == false)
            JOptionPane.showMessageDialog(this, "Flight does not exist", "Try again", JOptionPane.ERROR_MESSAGE);
        else if(model.findEmployee(Integer.parseInt(lead_attendant_idString)) == false)
            JOptionPane.showMessageDialog(this, "Lead attendant does not exist", "Try again", JOptionPane.ERROR_MESSAGE);
        else {
            try {
                model.updateLeadAttendant(Integer.parseInt(flight_idString), Integer.parseInt(lead_attendant_idString));
                JOptionPane.showMessageDialog(this, "Flight Lead attendant updated");
            }
            catch(Exception e){
                JOptionPane.showMessageDialog(this, "Error updating Flight Lead attendant", "Try again", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_viewBookings32ActionPerformed

    private void cFlightAttendantIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cFlightAttendantIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cFlightAttendantIDActionPerformed

    private void generateReportActionPerformed(java.awt.event.ActionEvent evt) {
        jTabbedPane1.setSelectedIndex(8);

        foReports.clear();

        try{
            int num = Integer.parseInt(year.getText());
            int num1 = Integer.parseInt(month.getText());
        } catch(Exception e) {
            JOptionPane.showMessageDialog(this, "Enter valid year/month", "Try again", JOptionPane.ERROR_MESSAGE);
        }

        if(Integer.parseInt(year.getText()) < 1900 || Integer.parseInt(year.getText()) > 2024)
            JOptionPane.showMessageDialog(this, "Enter valid year", "Try again", JOptionPane.ERROR_MESSAGE);
        else if(Integer.parseInt(month.getText()) > 12 || Integer.parseInt(month.getText()) < 1)
            JOptionPane.showMessageDialog(this, "Enter valid month", "Try again", JOptionPane.ERROR_MESSAGE);
        else {
            try {
                String query = "SELECT f.flight_id, f.origin, f.destination, COUNT(b.checkin_date) AS numbers " +
                        "FROM flights f JOIN bookings b ON f.flight_id = b.flight_id " +
                        "WHERE YEAR(b.checkin_date) = ? AND MONTH(b.checkin_date) = ? " +
                        "GROUP BY f.flight_id, f.origin, f.destination " +
                        "ORDER BY f.flight_id;";
                PreparedStatement stmt = con.prepareStatement(query);

                stmt.setInt(1, Integer.parseInt(year.getText()));
                stmt.setInt(2, Integer.parseInt(month.getText()));
                ResultSet rs = stmt.executeQuery();

                while(rs.next()) {
                    FlightOccupancyReport holder = new FlightOccupancyReport(rs.getInt("flight_id"),
                            rs.getString("destination"),
                            rs.getString("origin"),
                            rs.getInt("numbers"));
                    foReports.add(holder);
                }
            }
            catch(Exception e){
                JOptionPane.showMessageDialog(this, "Error generating report", "Try again", JOptionPane.ERROR_MESSAGE);
            }

            DefaultTableModel table = (DefaultTableModel) FORTable.getModel();

            table.setRowCount(0);

            for(int i = 0; i < foReports.size(); i++){
                table.addRow(new Object[]{foReports.get(i).getFlight_id(), foReports.get(i).getOrigin(), foReports.get(i).getDestination(), foReports.get(i).getNumPassenger()});
            }
        }
    }

    private void generateReport1ActionPerformed(java.awt.event.ActionEvent evt) {
        jTabbedPane1.setSelectedIndex(9);

        revReports.clear();

        try{
            int num = Integer.parseInt(year.getText());
        } catch(Exception e) {
            JOptionPane.showMessageDialog(this, "Enter valid year", "Try again", JOptionPane.ERROR_MESSAGE);
        }

        if(Integer.parseInt(year.getText()) < 1900 || Integer.parseInt(year.getText()) > 2024)
            JOptionPane.showMessageDialog(this, "Enter valid year", "Try again", JOptionPane.ERROR_MESSAGE);
        else {
            try {
                String query = "SELECT MONTH(f.departure) AS month, COUNT(f.flight_id) AS numbers, SUM(b.total_cost) as revenue " +
                        "FROM flights f LEFT JOIN bookings b ON f.flight_id " +
                        "WHERE YEAR(f.departure) = ? " +
                        "GROUP BY month " +
                        "ORDER BY month;";

                PreparedStatement stmt = con.prepareStatement(query);

                stmt.setInt(1, Integer.parseInt(year.getText()));

                ResultSet rs = stmt.executeQuery();

                while(rs.next()) {
                    RevenueReport holder = new RevenueReport(rs.getInt("month"),
                            rs.getInt("numbers"),
                            rs.getInt("revenue"));

                    revReports.add(holder);
                }
            }
            catch(Exception e){
                JOptionPane.showMessageDialog(this, "Error generating report", "Try again", JOptionPane.ERROR_MESSAGE);
            }

            DefaultTableModel table = (DefaultTableModel) RRTable.getModel();
            table.setRowCount(0);
            for(int i = 0; i < revReports.size(); i++){
                table.addRow(new Object[]{revReports.get(i).getMonth(), revReports.get(i).getNumFlights(), revReports.get(i).getTotalRevenue()});
            }
        }
    }

    private void generateReport2ActionPerformed(java.awt.event.ActionEvent evt) {
        jTabbedPane1.setSelectedIndex(10);

        passReports.clear();

        try{
            int num = Integer.parseInt(year.getText());
            int num1 = Integer.parseInt(month.getText());
        } catch(Exception e) {
            JOptionPane.showMessageDialog(this, "Enter valid year/month", "Try again", JOptionPane.ERROR_MESSAGE);
        }

        if(Integer.parseInt(year.getText()) < 1900 || Integer.parseInt(year.getText()) > 2024)
            JOptionPane.showMessageDialog(this, "Enter valid year", "Try again", JOptionPane.ERROR_MESSAGE);
        else if(Integer.parseInt(month.getText()) > 12 || Integer.parseInt(month.getText()) < 1)
            JOptionPane.showMessageDialog(this, "Enter valid month", "Try again", JOptionPane.ERROR_MESSAGE);
        else {
            try {
                String query = "SELECT p.last_name, p.first_name, p.email_address, p.vip_status, COUNT(b.ref_id) AS totalBookings " +
                        "FROM passengers p LEFT JOIN bookings b ON p.passenger_id = b.passenger_id " +
                        "WHERE YEAR(b.checkin_date) = ? AND MONTH(b.checkin_date) = ? " +
                        "GROUP BY p.last_name, p.first_name, p.email_address, p.vip_status;";

                PreparedStatement stmt = con.prepareStatement(query);

                stmt.setInt(1, Integer.parseInt(year.getText()));
                stmt.setInt(2, Integer.parseInt(month.getText()));

                ResultSet rs = stmt.executeQuery();

                while(rs.next()) {
                    PassengerReport holder = new PassengerReport(rs.getString("last_name"),
                            rs.getString("first_name"),
                            rs.getString("email_address"),
                            rs.getString("vip_status"),
                            rs.getInt("totalBookings"));

                    passReports.add(holder);
                }
            }
            catch(Exception e){
                JOptionPane.showMessageDialog(this, "Error generating report", "Try again", JOptionPane.ERROR_MESSAGE);
                System.out.println(e.getMessage());
            }

            DefaultTableModel table = (DefaultTableModel) PRTable.getModel();
            table.setRowCount(0);
            for(int i = 0; i < passReports.size(); i++){
                table.addRow(new Object[]{passReports.get(i).getLast_name(), passReports.get(i).getFirst_name(), passReports.get(i).getEmail_address(), passReports.get(i).getVip_status(), passReports.get(i).getTotalBookings()});
            }
        }
    }

    private void generateReport3ActionPerformed(java.awt.event.ActionEvent evt) {
        jTabbedPane1.setSelectedIndex(11);

        esReports.clear();

        try{
            int num = Integer.parseInt(year.getText());
            int num1 = Integer.parseInt(month.getText());
        } catch(Exception e) {
            JOptionPane.showMessageDialog(this, "Enter valid year/month", "Try again", JOptionPane.ERROR_MESSAGE);
        }

        if(Integer.parseInt(year.getText()) < 1900 || Integer.parseInt(year.getText()) > 2024)
            JOptionPane.showMessageDialog(this, "Enter valid year", "Try again", JOptionPane.ERROR_MESSAGE);
        else if(Integer.parseInt(month.getText()) > 12 || Integer.parseInt(month.getText()) < 1)
            JOptionPane.showMessageDialog(this, "Enter valid month", "Try again", JOptionPane.ERROR_MESSAGE);
        else {
            try {
                String query = "SELECT e.employee_id, COUNT(f.flight_id) AS numTasks, (e.salary * COUNT(f.flight_id)) AS totalRevenue " +
                        "FROM employees e LEFT JOIN flights f ON e.employee_id IN (f.pilot_id, f.copilot_id, f.lead_attendant, f.flight_attendant)" +
                        "WHERE YEAR(f.departure) = ? AND MONTH(f.departure) = ? " +
                        "GROUP BY e.employee_id, e.salary";

                PreparedStatement stmt = con.prepareStatement(query);

                stmt.setInt(1, Integer.parseInt(year.getText()));
                stmt.setInt(2, Integer.parseInt(month.getText()));

                ResultSet rs = stmt.executeQuery();

                while(rs.next()) {
                    EmployeeStatisticsReport holder = new EmployeeStatisticsReport(
                            rs.getInt("employee_id"),
                            rs.getInt("numTasks"),
                            rs.getDouble("totalRevenue"));

                    esReports.add(holder);
                }
            }
            catch(Exception e){
                System.out.println(e.getMessage());
                JOptionPane.showMessageDialog(this, "Error generating report", "Try again", JOptionPane.ERROR_MESSAGE);
            }

            DefaultTableModel table = (DefaultTableModel) ESRTable.getModel();

            table.setRowCount(0);
            for(int i = 0; i < esReports.size(); i++){
                table.addRow(new Object[]{esReports.get(i).getEmployee_id(), esReports.get(i).getNumTasks(), esReports.get(i).getTotalRevenue()});
            }
        }
    }

    private void yearActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    private void monthActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    private void manageEmployees1ActionPerformed(java.awt.event.ActionEvent evt) {
        String flight_id = flightID.getText();

        if(flight_id.isEmpty())
            JOptionPane.showMessageDialog(this, "Please enter required field", "Try again", JOptionPane.ERROR_MESSAGE);
        else if(!model.findFlight(Integer.parseInt(flight_id)))
            JOptionPane.showMessageDialog(this, "Flight does not exist", "Try again", JOptionPane.ERROR_MESSAGE);
        else {
            DefaultTableModel table = (DefaultTableModel) viewFlightPassengersTable.getModel();
            table.setRowCount(0);
            for(int i = 0; i < viewFlight.size(); i++){
                if(viewFlight.get(i).getFlight_id() == Integer.parseInt(flight_id))
                    for(int j = 0; j < viewFlight.get(i).getGuests().size(); j++)
                        table.addRow(new Object[]{viewFlight.get(i).getGuests().get(j).getID(), viewFlight.get(i).getGuests().get(j).getPassport_number(), viewFlight.get(i).getGuests().get(j).getLast_name(), viewFlight.get(i).getGuests().get(j).getFirst_name(), viewFlight.get(i).getGuests().get(j).getBirthdate(), viewFlight.get(i).getGuests().get(j).getContact_no(), viewFlight.get(i).getGuests().get(j).getEmail_address(), viewFlight.get(i).getGuests().get(j).getVip_status()});
            }
        }
    }

    private void flightIDActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    private void passengerIDActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    private void manageEmployees2ActionPerformed(java.awt.event.ActionEvent evt) {
        String passenger_id = passengerID.getText();

        if(passenger_id.isEmpty())
            JOptionPane.showMessageDialog(this, "Please enter required field", "Try again", JOptionPane.ERROR_MESSAGE);
        else if(!ViewController.model.findPassenger(Integer.parseInt(passenger_id)))
            JOptionPane.showMessageDialog(this, "Passenger does not exist", "Try again", JOptionPane.ERROR_MESSAGE);
        else {
            DefaultTableModel table = (DefaultTableModel) viewPassengerBookingsTable.getModel();

            table.setRowCount(0);

            for(int i = 0; i < viewPassenger.size(); i++){
                if(viewPassenger.get(i).getID() == Integer.parseInt(passenger_id))
                    if(!viewPassenger.get(i).getBookings().isEmpty())
                        for(int j = 0; j < viewPassenger.get(i).getBookings().size(); j++)
                            table.addRow(new Object[]{viewPassenger.get(i).getBookings().get(j).getID(), viewPassenger.get(i).getBookings().get(j).getPassenger_id(), viewPassenger.get(i).getBookings().get(j).getFlight_id(), viewPassenger.get(i).getBookings().get(j).getCheckin_date(), viewPassenger.get(i).getBookings().get(j).getSeat_no(), viewPassenger.get(i).getBookings().get(j).getSeat_class(), viewPassenger.get(i).getBookings().get(j).getTotal_cost(), viewPassenger.get(i).getBookings().get(j).getFood_order(), viewPassenger.get(i).getBookings().get(j).getTotal_checkin_bags()});
            }
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewController.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewController.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewController.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewController.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }


        String url = "jdbc:mysql://localhost:3306/ccinfom";
        String username = "root";
        String password = "12345678";

        Model model_use = null;
        Connection connection = null;

        try {
            connection = DriverManager.getConnection(url, username, password);
            System.out.println("Success Connection!");
            model_use = new Model(connection);
        } catch(SQLException e) {
            System.out.println("Error in opening the database!");
            System.out.println(e.getMessage());
        }

        if (model_use == null) {
            System.out.println("Exiting the application as database connection failed.");
            return; // Exit if the database connection failed
        }

        /* Create and display the form */
        Model finalModel_use = model_use;
        Connection finalConnection = connection;
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ViewController(finalModel_use, finalConnection).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify
    private javax.swing.JTable ESRTable;
    private javax.swing.JTable FORTable;
    private javax.swing.JPanel Options;
    private javax.swing.JTable PRTable;
    private javax.swing.JTable RRTable;
    private javax.swing.JPanel background;
    private javax.swing.JPanel bookingManager;
    private javax.swing.JPanel bookingView;
    private javax.swing.JTextField cArrival;
    private javax.swing.JTextField cBFlightID;
    private javax.swing.JTextField cBPassengerID;
    private javax.swing.JTextField cBagTotal;
    private javax.swing.JTextField cBasePrice;
    private javax.swing.JTextField cBirthdate;
    private javax.swing.JTextField cCheckInDate;
    private javax.swing.JTextField cContactNo;
    private javax.swing.JTextField cCopilotID;
    private javax.swing.JTextField cDepartment;
    private javax.swing.JTextField cDeparture;
    private javax.swing.JTextField cDestination;
    private javax.swing.JTextField cEmailAddress;
    private javax.swing.JTextField cEmpFirstName;
    private javax.swing.JTextField cEmpLastName;
    private javax.swing.JTextField cFirstName;
    private javax.swing.JTextField cFlightAttendantID;
    private javax.swing.JComboBox<String> cFood;
    private javax.swing.JTextField cGateNumber;
    private javax.swing.JTextField cHireDate;
    private javax.swing.JTextField cJobTitle;
    private javax.swing.JTextField cLastName;
    private javax.swing.JTextField cLeadAttendantID;
    private javax.swing.JTextField cOrigin;
    private javax.swing.JTextField cPassportNumber;
    private javax.swing.JTextField cPilotID;
    private javax.swing.JTextField cSalary;
    private javax.swing.JComboBox<String> cSeatClass;
    private javax.swing.JTextField cSeatNo;
    private javax.swing.JComboBox<String> cVIPStatus;
    private javax.swing.JButton createEmployeeButton;
    private javax.swing.JButton createPassengerButton;
    private javax.swing.JButton createPassengerButton2;
    private javax.swing.JButton createPassengerButton3;
    private javax.swing.JTextField dBookingID;
    private javax.swing.JTextField dEmployeeID;
    private javax.swing.JTextField dFlightID;
    private javax.swing.JTextField dPassengerID;
    private javax.swing.JButton deleteEmployeeButton;
    private javax.swing.JButton deletePassengerButton;
    private javax.swing.JButton deletePassengerButton2;
    private javax.swing.JButton deletePassengerButton3;
    private javax.swing.JPanel employeeManager;
    private javax.swing.JTable employeeTable;
    private javax.swing.JPanel employeeView;
    private javax.swing.JTextField flightID;
    private javax.swing.JPanel flightManager;
    private javax.swing.JPanel flightView;
    private javax.swing.JButton generateReport;
    private javax.swing.JButton generateReport1;
    private javax.swing.JButton generateReport2;
    private javax.swing.JButton generateReport3;
    private javax.swing.JPanel harang;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JLabel jLabel54;
    private javax.swing.JLabel jLabel55;
    private javax.swing.JLabel jLabel56;
    private javax.swing.JLabel jLabel57;
    private javax.swing.JLabel jLabel58;
    private javax.swing.JLabel jLabel59;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel60;
    private javax.swing.JLabel jLabel61;
    private javax.swing.JLabel jLabel62;
    private javax.swing.JLabel jLabel63;
    private javax.swing.JLabel jLabel64;
    private javax.swing.JLabel jLabel65;
    private javax.swing.JLabel jLabel66;
    private javax.swing.JLabel jLabel67;
    private javax.swing.JLabel jLabel68;
    private javax.swing.JLabel jLabel69;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel70;
    private javax.swing.JLabel jLabel71;
    private javax.swing.JLabel jLabel72;
    private javax.swing.JLabel jLabel73;
    private javax.swing.JLabel jLabel74;
    private javax.swing.JLabel jLabel75;
    private javax.swing.JLabel jLabel76;
    private javax.swing.JLabel jLabel77;
    private javax.swing.JLabel jLabel78;
    private javax.swing.JLabel jLabel79;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel80;
    private javax.swing.JLabel jLabel81;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JButton manageBookings;
    private javax.swing.JButton manageEmployees;
    private javax.swing.JButton manageEmployees1;
    private javax.swing.JButton manageEmployees2;
    private javax.swing.JButton manageFlights;
    private javax.swing.JButton managePassengers;
    private javax.swing.JTextField month;
    private javax.swing.JTextField passengerID;
    private javax.swing.JPanel passengerManager;
    private javax.swing.JPanel passengerView;
    private javax.swing.JTextField uArrival;
    private javax.swing.JTextField uBFlightID;
    private javax.swing.JTextField uBPassengerID;
    private javax.swing.JTextField uBagTotal;
    private javax.swing.JTextField uBirthdate;
    private javax.swing.JTextField uBookingID;
    private javax.swing.JTextField uCheckInDate;
    private javax.swing.JTextField uContactNo;
    private javax.swing.JTextField uCopilotID;
    private javax.swing.JTextField uDepartment;
    private javax.swing.JTextField uDeparture;
    private javax.swing.JTextField uDestination;
    private javax.swing.JTextField uEmailAddress;
    private javax.swing.JTextField uEmpFirstName;
    private javax.swing.JTextField uEmpLastName;
    private javax.swing.JTextField uEmployeeID;
    private javax.swing.JTextField uFirstName;
    private javax.swing.JTextField uFlightAttendantID;
    private javax.swing.JTextField uFlightID;
    private javax.swing.JComboBox<String> uFood;
    private javax.swing.JTextField uGateNumber;
    private javax.swing.JTextField uHireDate;
    private javax.swing.JTextField uJobTitle;
    private javax.swing.JTextField uLastName;
    private javax.swing.JTextField uLeadAttendantID;
    private javax.swing.JTextField uOrigin;
    private javax.swing.JTextField uPassengerID;
    private javax.swing.JTextField uPassportNumber;
    private javax.swing.JTextField uPilotID;
    private javax.swing.JTextField uSalary;
    private javax.swing.JComboBox<String> uSeatClass;
    private javax.swing.JTextField uSeatNo;
    private javax.swing.JComboBox<String> uVIPStatus;
    private javax.swing.JButton updateJobTitleButton;
    private javax.swing.JButton viewBookings;
    private javax.swing.JButton viewBookings11;
    private javax.swing.JButton viewBookings12;
    private javax.swing.JButton viewBookings13;
    private javax.swing.JButton viewBookings14;
    private javax.swing.JButton viewBookings15;
    private javax.swing.JButton viewBookings17;
    private javax.swing.JButton viewBookings18;
    private javax.swing.JButton viewBookings19;
    private javax.swing.JButton viewBookings20;
    private javax.swing.JButton viewBookings21;
    private javax.swing.JButton viewBookings22;
    private javax.swing.JButton viewBookings23;
    private javax.swing.JButton viewBookings24;
    private javax.swing.JButton viewBookings25;
    private javax.swing.JButton viewBookings26;
    private javax.swing.JButton viewBookings27;
    private javax.swing.JButton viewBookings28;
    private javax.swing.JButton viewBookings29;
    private javax.swing.JButton viewBookings3;
    private javax.swing.JButton viewBookings30;
    private javax.swing.JButton viewBookings31;
    private javax.swing.JButton viewBookings32;
    private javax.swing.JButton viewBookings4;
    private javax.swing.JButton viewBookings5;
    private javax.swing.JButton viewBookings6;
    private javax.swing.JButton viewBookings7;
    private javax.swing.JButton viewBookings8;
    private javax.swing.JButton viewBookings9;
    private javax.swing.JTable viewBookingsTable;
    private javax.swing.JButton viewEmployees;
    private javax.swing.JTable viewFlightPassengersTable;
    private javax.swing.JTable viewFlightTable;
    private javax.swing.JButton viewFlights;
    private javax.swing.JTable viewPassengerBookingsTable;
    private javax.swing.JTable viewPassengerTable;
    private javax.swing.JButton viewPassengers;
    private javax.swing.JTextField year;
    // End of variables declaration
}
