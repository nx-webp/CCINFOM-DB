package employee;

import java.sql.*;
import java.util.Scanner;

public class Employee {

    public static void main(String[] args) {
        String url = "jdbc:mysql://localhost:3306/airport";
        String user = "root";
        String password = "Cupidissodumb<3"; // Change this na lng

        // Scanner for user input
        try (Scanner scanner = new Scanner(System.in)) {
            // Establish database connection
            try (Connection con = DriverManager.getConnection(url, user, password)) {
                System.out.println("Connection created successfully.");

                // Display menu options
                while (true) {
                    System.out.println("\nSelect an option:");
                    System.out.println("1. Show all employees");
                    System.out.println("2. Insert into Employee Table");
                    System.out.println("3. Update Employee(s) Information");
                    System.out.println("4. Show Available Employees by Criteria");
                    System.out.println("5. Delete Employee from Database");
                    System.out.println("6. Show Total Flights Handled by Employees");
                    System.out.println("7. Mark Employees as Finished with a Flight");
                    System.out.println("8. Exit");
                    System.out.print("Enter your choice: ");

                    int choice = scanner.nextInt();
                    scanner.nextLine(); // Consume newline

                    switch (choice) {
                        case 1 -> showAllEmployees(con);
                        case 2 -> insertEmployee(con, scanner);
                        case 3 -> updateEmployeeInformation(con, scanner);
                        case 4 -> showAvailableEmployees(con, scanner);
                        case 5 -> deleteEmployee(con, scanner);
                        case 6 -> showTotalFlightsHandled(con);
                        case 7 -> markFinishedFlights(con, scanner);
                        case 8 -> {
                            System.out.println("Exiting program. Goodbye!");
                            return;
                        }
                        default -> System.out.println("Invalid choice. Please try again.");
                    }
                }
            } catch (SQLException e) {
                System.out.println("Database connection failed: " + e.getMessage());
            }
        }
    }

    // Option 1: Show all employees
    private static void showAllEmployees(Connection con) throws SQLException {
        String query = "SELECT * FROM Employee";
        try (Statement stmt = con.createStatement(); ResultSet rs = stmt.executeQuery(query)) {
            System.out.println("Employee Details:");
            System.out.println("----------------------------------------------------------");
            while (rs.next()) {
                System.out.printf("ID: %d, Name: %s %s, Job: %s, Salary: %.2f, Dept: %s, Flight: %s%n",
                        rs.getInt("employee_ID"),
                        rs.getString("first_name"),
                        rs.getString("last_name"),
                        rs.getString("job_title"),
                        rs.getDouble("salary"),
                        rs.getString("department"),
                        rs.getObject("flight_id"));
            }
        }
    }

    // Option 2: Insert into Employee table
    private static void insertEmployee(Connection con, Scanner scanner) throws SQLException {
        System.out.println("Enter employee details:");
        // Remove input for employee_ID as it's auto-generated
        System.out.print("First Name: ");
        String firstName = scanner.nextLine();
        System.out.print("Last Name: ");
        String lastName = scanner.nextLine();
        System.out.print("Job Title: ");
        String jobTitle = scanner.nextLine();
        System.out.print("Hire Date (YYYY-MM-DD): ");
        String hireDate = scanner.nextLine();
        System.out.print("Salary: ");
        double salary = scanner.nextDouble();
        scanner.nextLine(); // Consume newline
        System.out.print("Department: ");
        String department = scanner.nextLine();

        // SQL query without employee_ID
        String query = "INSERT INTO Employee (first_name, last_name, job_title, hire_date, salary, department, flight_id) VALUES (?, ?, ?, ?, ?, ?, NULL)";
        try (PreparedStatement stmt = con.prepareStatement(query)) {
            stmt.setString(1, firstName);
            stmt.setString(2, lastName);
            stmt.setString(3, jobTitle);
            stmt.setString(4, hireDate);
            stmt.setDouble(5, salary);
            stmt.setString(6, department);

            int rows = stmt.executeUpdate();
            if (rows > 0) {
                System.out.println("Employee added successfully!");
            } else {
                System.out.println("Failed to add employee.");
            }
        }
    }

 // Option 3: Update Employee Information
    private static void updateEmployeeInformation(Connection con, Scanner scanner) throws SQLException {
        System.out.print("Enter Employee ID to update: ");
        int empID = scanner.nextInt();
        scanner.nextLine(); // Consume newline

        System.out.println("Select the field you want to update:");
        System.out.println("1. Name");
        System.out.println("2. Job Title");
        System.out.println("3. Department");
        System.out.println("4. Flight Assignment");
        System.out.println("5. Salary");
        System.out.println("6. Hire Date");

        int updateChoice = scanner.nextInt();
        scanner.nextLine(); // Consume newline

        switch (updateChoice) {
            case 1 -> {
                // Update Name
                System.out.print("Enter new First Name: ");
                String newFirstName = scanner.nextLine();

                System.out.print("Enter new Last Name: ");
                String newLastName = scanner.nextLine();

                String updateNameSQL = "UPDATE Employee SET first_name = ?, last_name = ? WHERE employee_ID = ?";
                try (PreparedStatement stmt = con.prepareStatement(updateNameSQL)) {
                    stmt.setString(1, newFirstName);
                    stmt.setString(2, newLastName);
                    stmt.setInt(3, empID);

                    int rowsAffected = stmt.executeUpdate();
                    if (rowsAffected > 0) {
                        System.out.println("Employee name updated successfully.");
                    } else {
                        System.out.println("Employee ID not found.");
                    }
                } catch (SQLException e) {
                    System.out.println("Error updating name: " + e.getMessage());
                }
            }
            case 2 -> {
                // Update Job Title
                System.out.print("Enter new Job Title: ");
                String newJobTitle = scanner.nextLine();

                String updateJobTitleSQL = "UPDATE Employee SET job_title = ? WHERE employee_ID = ?";
                try (PreparedStatement stmt = con.prepareStatement(updateJobTitleSQL)) {
                    stmt.setString(1, newJobTitle);
                    stmt.setInt(2, empID);

                    int rowsAffected = stmt.executeUpdate();
                    if (rowsAffected > 0) {
                        System.out.println("Employee job title updated successfully.");
                    } else {
                        System.out.println("Employee ID not found.");
                    }
                } catch (SQLException e) {
                    System.out.println("Error updating job title: " + e.getMessage());
                }
            }
            case 3 -> {
                // Update Department
                System.out.print("Enter new Department: ");
                String newDepartment = scanner.nextLine();

                String updateDepartmentSQL = "UPDATE Employee SET department = ? WHERE employee_ID = ?";
                try (PreparedStatement stmt = con.prepareStatement(updateDepartmentSQL)) {
                    stmt.setString(1, newDepartment);
                    stmt.setInt(2, empID);

                    int rowsAffected = stmt.executeUpdate();
                    if (rowsAffected > 0) {
                        System.out.println("Employee department updated successfully.");
                    } else {
                        System.out.println("Employee ID not found.");
                    }
                } catch (SQLException e) {
                    System.out.println("Error updating department: " + e.getMessage());
                }
            }
            case 4 -> {
                // Update Flight Assignment
                System.out.print("Enter new Flight ID for assignment: ");
                int newFlightID = scanner.nextInt();

                String updateFlightSQL = "UPDATE Employee SET flight_id = ? WHERE employee_ID = ?";
                try (PreparedStatement stmt = con.prepareStatement(updateFlightSQL)) {
                    stmt.setInt(1, newFlightID);
                    stmt.setInt(2, empID);

                    int rowsAffected = stmt.executeUpdate();
                    if (rowsAffected > 0) {
                        System.out.println("Employee flight assignment updated successfully.");
                    } else {
                        System.out.println("Employee ID not found.");
                    }
                } catch (SQLException e) {
                    System.out.println("Error updating flight assignment: " + e.getMessage());
                }
            }
            case 5 -> {
                // Update Salary
                System.out.print("Enter new Salary: ");
                double newSalary = scanner.nextDouble();

                String updateSalarySQL = "UPDATE Employee SET salary = ? WHERE employee_ID = ?";
                try (PreparedStatement stmt = con.prepareStatement(updateSalarySQL)) {
                    stmt.setDouble(1, newSalary);
                    stmt.setInt(2, empID);

                    int rowsAffected = stmt.executeUpdate();
                    if (rowsAffected > 0) {
                        System.out.println("Employee salary updated successfully.");
                    } else {
                        System.out.println("Employee ID not found.");
                    }
                } catch (SQLException e) {
                    System.out.println("Error updating salary: " + e.getMessage());
                }
            }
            case 6 -> {
                // Update Hire Date
                System.out.print("Enter new Hire Date (YYYY-MM-DD): ");
                String newHireDate = scanner.nextLine();

                String updateHireDateSQL = "UPDATE Employee SET hire_date = ? WHERE employee_ID = ?";
                try (PreparedStatement stmt = con.prepareStatement(updateHireDateSQL)) {
                    stmt.setString(1, newHireDate);
                    stmt.setInt(2, empID);

                    int rowsAffected = stmt.executeUpdate();
                    if (rowsAffected > 0) {
                        System.out.println("Employee hire date updated successfully.");
                    } else {
                        System.out.println("Employee ID not found.");
                    }
                } catch (SQLException e) {
                    System.out.println("Error updating hire date: " + e.getMessage());
                }
            }
            default -> System.out.println("Invalid choice. Please try again.");
        }
    }

    // Option 4: Show Available Employees by Criteria
    private static void showAvailableEmployees(Connection con, Scanner scanner) throws SQLException {
        System.out.println("Select filter criteria:");
        System.out.println("1. Employees without flight assignments");
        System.out.println("2. Employees by department");
        System.out.println("3. Employees by job title");
        int choice = scanner.nextInt();
        scanner.nextLine(); // Consume newline

        String query = switch (choice) {
            case 1 -> "SELECT * FROM Employee WHERE flight_id IS NULL";
            case 2 -> {
                System.out.print("Enter department: ");
                String department = scanner.nextLine();
                yield "SELECT * FROM Employee WHERE department = '" + department + "'";
            }
            case 3 -> {
                System.out.print("Enter job title: ");
                String jobTitle = scanner.nextLine();
                yield "SELECT * FROM Employee WHERE job_title = '" + jobTitle + "'";
            }
            default -> {
                System.out.println("Invalid choice.");
                yield null;
            }
        };

        if (query != null) {
            try (Statement stmt = con.createStatement(); ResultSet rs = stmt.executeQuery(query)) {
                while (rs.next()) {
                    System.out.printf("ID: %d, Name: %s %s%n",
                            rs.getInt("employee_ID"),
                            rs.getString("first_name"),
                            rs.getString("last_name"));
                }
            }
        }
    }

    // Option 5: Delete Employee
    private static void deleteEmployee(Connection con, Scanner scanner) throws SQLException {
        System.out.print("Enter Employee IDs to delete (comma-separated): ");
        String[] employeeIDs = scanner.nextLine().split(",");

        String query = "DELETE FROM Employee WHERE employee_ID = ?";
        try (PreparedStatement stmt = con.prepareStatement(query)) {
            for (String id : employeeIDs) {
                stmt.setInt(1, Integer.parseInt(id.trim()));
                int rows = stmt.executeUpdate();
                if (rows > 0) {
                    System.out.println("Deleted Employee ID " + id.trim());
                } else {
                    System.out.println("Failed to delete Employee ID " + id.trim());
                }
            }
        }
    }

    // Option 6: Show Total Flights Handled by Employees
    private static void showTotalFlightsHandled(Connection con) throws SQLException {
        String query = "SELECT employee_ID, first_name, last_name, COUNT(flight_id) AS total_flights " +
                       "FROM Employee " +
                       "WHERE flight_id IS NOT NULL " +
                       "GROUP BY employee_ID, first_name, last_name";

        try (Statement stmt = con.createStatement(); ResultSet rs = stmt.executeQuery(query)) {
            while (rs.next()) {
                System.out.printf("Employee ID: %d, Name: %s %s, Total Flights: %d%n",
                        rs.getInt("employee_ID"),
                        rs.getString("first_name"),
                        rs.getString("last_name"),
                        rs.getInt("total_flights"));
            }
        }
    }

    // Option 7: Mark Employees as Finished with a Flight
    private static void markFinishedFlights(Connection con, Scanner scanner) throws SQLException {
        System.out.print("Enter Employee IDs to mark as finished (comma-separated): ");
        String[] employeeIDs = scanner.nextLine().split(",");

        String query = "UPDATE Employee SET flight_id = NULL WHERE employee_ID = ?";
        try (PreparedStatement stmt = con.prepareStatement(query)) {
            for (String id : employeeIDs) {
                stmt.setInt(1, Integer.parseInt(id.trim()));
                int rows = stmt.executeUpdate();
                if (rows > 0) {
                    System.out.println("Marked Employee ID " + id.trim() + " as finished.");
                } else {
                    System.out.println("Failed to update Employee ID " + id.trim());
                }
            }
        }
    }
}
